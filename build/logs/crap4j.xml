<?xml version="1.0" encoding="UTF-8"?>
<crap_result>
  <project/>
  <timestamp>2018-08-07 10:34:27</timestamp>
  <stats>
    <name>Method Crap Stats</name>
    <methodCount>570</methodCount>
    <crapMethodCount>165</crapMethodCount>
    <crapLoad>1888</crapLoad>
    <totalCrap>40259.71</totalCrap>
    <crapMethodPercent>28.95</crapMethodPercent>
  </stats>
  <methods>
    <method>
      <package>Application\Base\Controller</package>
      <className>BaseController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Base\Controller</package>
      <className>BaseController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Base\Controller</package>
      <className>BaseYarController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Base\Controller</package>
      <className>BaseYarController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Base\Model</package>
      <className>BaseModel</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Base\Model</package>
      <className>BaseMongoModel</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Manage\Base\Controller</package>
      <className>BaseController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Manage\Base\Controller</package>
      <className>BaseController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Manage\Base\Controller</package>
      <className>BaseYarController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Manage\Base\Controller</package>
      <className>BaseYarController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Manage\Base\Model</package>
      <className>BaseModel</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Manage\Base\Model</package>
      <className>BaseMongoModel</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Cost\Controller</package>
      <className>CostController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Cost\Controller</package>
      <className>CostController</className>
      <methodName>DoGetOrderAllTotal</methodName>
      <methodSignature>DoGetOrderAllTotal($params = [])</methodSignature>
      <fullMethod>DoGetOrderAllTotal($params = [])</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>Cost\Controller</package>
      <className>CostController</className>
      <methodName>_checkOrderAllTotal</methodName>
      <methodSignature>_checkOrderAllTotal($params = [])</methodSignature>
      <fullMethod>_checkOrderAllTotal($params = [])</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>OrderCostModel</className>
      <methodName>calcOrderPrice</methodName>
      <methodSignature>calcOrderPrice($params = [])</methodSignature>
      <fullMethod>calcOrderPrice($params = [])</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>OrderCostModel</className>
      <methodName>CostRuleAll</methodName>
      <methodSignature>CostRuleAll($params = [])</methodSignature>
      <fullMethod>CostRuleAll($params = [])</fullMethod>
      <crap>342</crap>
      <complexity>18</complexity>
      <coverage>0</coverage>
      <crapLoad>19</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>OrderCostModel</className>
      <methodName>CostRuleOneSelf</methodName>
      <methodSignature>CostRuleOneSelf($params = [])</methodSignature>
      <fullMethod>CostRuleOneSelf($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>OrderCostModel</className>
      <methodName>subTotal</methodName>
      <methodSignature>subTotal($params = [])</methodSignature>
      <fullMethod>subTotal($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>OrderCostModel</className>
      <methodName>packagingCost</methodName>
      <methodSignature>packagingCost($params = [])</methodSignature>
      <fullMethod>packagingCost($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>OrderCostModel</className>
      <methodName>originalPrice</methodName>
      <methodSignature>originalPrice($params = [])</methodSignature>
      <fullMethod>originalPrice($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>OrderCostModel</className>
      <methodName>priceTotal</methodName>
      <methodSignature>priceTotal($params = [])</methodSignature>
      <fullMethod>priceTotal($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>OrderCostModel</className>
      <methodName>testSubsidy</methodName>
      <methodSignature>testSubsidy($params = [])</methodSignature>
      <fullMethod>testSubsidy($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>OrderCostModel</className>
      <methodName>restaurantSubsidy</methodName>
      <methodSignature>restaurantSubsidy($params = [])</methodSignature>
      <fullMethod>restaurantSubsidy($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>OrderCostModel</className>
      <methodName>receivableTotal</methodName>
      <methodSignature>receivableTotal()</methodSignature>
      <fullMethod>receivableTotal()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>OrderCostModel</className>
      <methodName>totalAmount</methodName>
      <methodSignature>totalAmount()</methodSignature>
      <fullMethod>totalAmount()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>OrderCostModel</className>
      <methodName>actualServiceCharge</methodName>
      <methodSignature>actualServiceCharge()</methodSignature>
      <fullMethod>actualServiceCharge()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>OrderCostModel</className>
      <methodName>getFavorableInfo</methodName>
      <methodSignature>getFavorableInfo($params = [])</methodSignature>
      <fullMethod>getFavorableInfo($params = [])</fullMethod>
      <crap>552</crap>
      <complexity>23</complexity>
      <coverage>0</coverage>
      <crapLoad>24</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>OrderCostModel</className>
      <methodName>calculateFavorablePrice</methodName>
      <methodSignature>calculateFavorablePrice($params = [])</methodSignature>
      <fullMethod>calculateFavorablePrice($params = [])</fullMethod>
      <crap>156</crap>
      <complexity>12</complexity>
      <coverage>0</coverage>
      <crapLoad>12</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>OrderCostModel</className>
      <methodName>calcOrderDeliveryCostMax</methodName>
      <methodSignature>calcOrderDeliveryCostMax($params = [])</methodSignature>
      <fullMethod>calcOrderDeliveryCostMax($params = [])</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>OrderCostModel</className>
      <methodName>getDefaultRuleDeliveryCost</methodName>
      <methodSignature>getDefaultRuleDeliveryCost($params = [])</methodSignature>
      <fullMethod>getDefaultRuleDeliveryCost($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Cost\Model</package>
      <className>StatusCode</className>
      <methodName>returnFormat</methodName>
      <methodSignature>returnFormat($info = '', $status = self::SUCCESS_CODE)</methodSignature>
      <fullMethod>returnFormat($info = '', $status = self::SUCCESS_CODE)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Cost\Service</package>
      <className>FavorableService</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Cost\Service</package>
      <className>FavorableService</className>
      <methodName>validateVipFavorableReturnInfo</methodName>
      <methodSignature>validateVipFavorableReturnInfo($params = [])</methodSignature>
      <fullMethod>validateVipFavorableReturnInfo($params = [])</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Cost\Service</package>
      <className>FavorableService</className>
      <methodName>validateCardFavorableReturnInfo</methodName>
      <methodSignature>validateCardFavorableReturnInfo($params = [])</methodSignature>
      <fullMethod>validateCardFavorableReturnInfo($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Cost\Service</package>
      <className>FavorableService</className>
      <methodName>validateCouponFavorableReturnInfo</methodName>
      <methodSignature>validateCouponFavorableReturnInfo($params = [])</methodSignature>
      <fullMethod>validateCouponFavorableReturnInfo($params = [])</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>Cost\Service</package>
      <className>FavorableService</className>
      <methodName>validateCouponActivityFavorableReturnInfo</methodName>
      <methodSignature>validateCouponActivityFavorableReturnInfo($params = [])</methodSignature>
      <fullMethod>validateCouponActivityFavorableReturnInfo($params = [])</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Cost\Service</package>
      <className>FavorableService</className>
      <methodName>validateOrderFullFreeDeliveryCostActivity</methodName>
      <methodSignature>validateOrderFullFreeDeliveryCostActivity($params = [])</methodSignature>
      <fullMethod>validateOrderFullFreeDeliveryCostActivity($params = [])</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Cost\Service</package>
      <className>FavorableService</className>
      <methodName>favorableConfig</methodName>
      <methodSignature>favorableConfig($key = '')</methodSignature>
      <fullMethod>favorableConfig($key = '')</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Base\Controller</package>
      <className>BaseController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Base\Controller</package>
      <className>BaseController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Base\Controller</package>
      <className>BaseYarController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Base\Controller</package>
      <className>BaseYarController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Base\Model</package>
      <className>BaseModel</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Base\Model</package>
      <className>BaseMongoModel</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Base\Model</package>
      <className>BaseMongoModel</className>
      <methodName>getMyMongoNextId</methodName>
      <methodSignature>getMyMongoNextId($pk = '', $table_name = '')</methodSignature>
      <fullMethod>getMyMongoNextId($pk = '', $table_name = '')</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>LogViewController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>LogViewController</className>
      <methodName>chooseOrder</methodName>
      <methodSignature>chooseOrder()</methodSignature>
      <fullMethod>chooseOrder()</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>LogViewController</className>
      <methodName>logByOrder</methodName>
      <methodSignature>logByOrder()</methodSignature>
      <fullMethod>logByOrder()</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>LogViewController</className>
      <methodName>warningLog</methodName>
      <methodSignature>warningLog()</methodSignature>
      <fullMethod>warningLog()</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderAuditController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderAuditController</className>
      <methodName>getOrderAuditList</methodName>
      <methodSignature>getOrderAuditList($params = [])</methodSignature>
      <fullMethod>getOrderAuditList($params = [])</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderAuditController</className>
      <methodName>AutoOrderAudit</methodName>
      <methodSignature>AutoOrderAudit($order)</methodSignature>
      <fullMethod>AutoOrderAudit($order)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderAuditController</className>
      <methodName>orderAuditRule</methodName>
      <methodSignature>orderAuditRule($params)</methodSignature>
      <fullMethod>orderAuditRule($params)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderAuditController</className>
      <methodName>checkOrderAuditRule</methodName>
      <methodSignature>checkOrderAuditRule($params, $local_config = [])</methodSignature>
      <fullMethod>checkOrderAuditRule($params, $local_config = [])</fullMethod>
      <crap>702</crap>
      <complexity>26</complexity>
      <coverage>0</coverage>
      <crapLoad>27</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderAuditController</className>
      <methodName>isPreOrder</methodName>
      <methodSignature>isPreOrder($params)</methodSignature>
      <fullMethod>isPreOrder($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderAuditController</className>
      <methodName>auditConfigKey</methodName>
      <methodSignature>auditConfigKey($config = [])</methodSignature>
      <fullMethod>auditConfigKey($config = [])</fullMethod>
      <crap>156</crap>
      <complexity>12</complexity>
      <coverage>0</coverage>
      <crapLoad>12</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderAuditController</className>
      <methodName>getAuditConditionConfig</methodName>
      <methodSignature>getAuditConditionConfig($auditCondition)</methodSignature>
      <fullMethod>getAuditConditionConfig($auditCondition)</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderChangeController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderChangeController</className>
      <methodName>process</methodName>
      <methodSignature>process(array $params)</methodSignature>
      <fullMethod>process(array $params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderChangeController</className>
      <methodName>soaMessageProcess</methodName>
      <methodSignature>soaMessageProcess(array $message)</methodSignature>
      <fullMethod>soaMessageProcess(array $message)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>DoCreateOrder</methodName>
      <methodSignature>DoCreateOrder($params = [])</methodSignature>
      <fullMethod>DoCreateOrder($params = [])</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>DoUpdateOrder</methodName>
      <methodSignature>DoUpdateOrder($params = [])</methodSignature>
      <fullMethod>DoUpdateOrder($params = [])</fullMethod>
      <crap>1482</crap>
      <complexity>38</complexity>
      <coverage>0</coverage>
      <crapLoad>39</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>DoUrgent</methodName>
      <methodSignature>DoUrgent($params = [])</methodSignature>
      <fullMethod>DoUrgent($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>_checkOrderUrgent</methodName>
      <methodSignature>_checkOrderUrgent($params = [])</methodSignature>
      <fullMethod>_checkOrderUrgent($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>DoGetOrderList</methodName>
      <methodSignature>DoGetOrderList($params = [])</methodSignature>
      <fullMethod>DoGetOrderList($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>DoGetOrderInfo</methodName>
      <methodSignature>DoGetOrderInfo($params = [])</methodSignature>
      <fullMethod>DoGetOrderInfo($params = [])</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>DoAudit</methodName>
      <methodSignature>DoAudit($params = [])</methodSignature>
      <fullMethod>DoAudit($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>DoPayment</methodName>
      <methodSignature>DoPayment($params = [])</methodSignature>
      <fullMethod>DoPayment($params = [])</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>DoPaymentCallback</methodName>
      <methodSignature>DoPaymentCallback($params = [])</methodSignature>
      <fullMethod>DoPaymentCallback($params = [])</fullMethod>
      <crap>1122</crap>
      <complexity>33</complexity>
      <coverage>0</coverage>
      <crapLoad>34</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>DoBalancePaymentCallback</methodName>
      <methodSignature>DoBalancePaymentCallback($params = [])</methodSignature>
      <fullMethod>DoBalancePaymentCallback($params = [])</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>DoCancelOrder</methodName>
      <methodSignature>DoCancelOrder($params)</methodSignature>
      <fullMethod>DoCancelOrder($params)</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>getHistoryOrderList</methodName>
      <methodSignature>getHistoryOrderList($params = [])</methodSignature>
      <fullMethod>getHistoryOrderList($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>checkOrderAmountDo</methodName>
      <methodSignature>checkOrderAmountDo($order_list, $type)</methodSignature>
      <fullMethod>checkOrderAmountDo($order_list, $type)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>cancelOrderStatusCheck</methodName>
      <methodSignature>cancelOrderStatusCheck($order_info = [])</methodSignature>
      <fullMethod>cancelOrderStatusCheck($order_info = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>DoReturnPaymentPrice</methodName>
      <methodSignature>DoReturnPaymentPrice($params)</methodSignature>
      <fullMethod>DoReturnPaymentPrice($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>getOrderByNo</methodName>
      <methodSignature>getOrderByNo($params = [])</methodSignature>
      <fullMethod>getOrderByNo($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>DoReturnOrderData</methodName>
      <methodSignature>DoReturnOrderData($params = [])</methodSignature>
      <fullMethod>DoReturnOrderData($params = [])</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>_after_work</methodName>
      <methodSignature>_after_work($params = [])</methodSignature>
      <fullMethod>_after_work($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>_update_after_work</methodName>
      <methodSignature>_update_after_work($params = [])</methodSignature>
      <fullMethod>_update_after_work($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>delUpdateOrderStock</methodName>
      <methodSignature>delUpdateOrderStock($order_id)</methodSignature>
      <fullMethod>delUpdateOrderStock($order_id)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>interfaceParamsToOrderParams</methodName>
      <methodSignature>interfaceParamsToOrderParams($params = [])</methodSignature>
      <fullMethod>interfaceParamsToOrderParams($params = [])</fullMethod>
      <crap>1332</crap>
      <complexity>36</complexity>
      <coverage>0</coverage>
      <crapLoad>37</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>_checkPaymentBackParams</methodName>
      <methodSignature>_checkPaymentBackParams($params)</methodSignature>
      <fullMethod>_checkPaymentBackParams($params)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>_checkOrderUpdateAudit</methodName>
      <methodSignature>_checkOrderUpdateAudit($params)</methodSignature>
      <fullMethod>_checkOrderUpdateAudit($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>orderSnapshot</methodName>
      <methodSignature>orderSnapshot($params)</methodSignature>
      <fullMethod>orderSnapshot($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>DoGetOrderSnapshot</methodName>
      <methodSignature>DoGetOrderSnapshot($params = [])</methodSignature>
      <fullMethod>DoGetOrderSnapshot($params = [])</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>DoGetPaymentModeToOrderModeList</methodName>
      <methodSignature>DoGetPaymentModeToOrderModeList()</methodSignature>
      <fullMethod>DoGetPaymentModeToOrderModeList()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>DoUpdateOrderStatus</methodName>
      <methodSignature>DoUpdateOrderStatus($params = [])</methodSignature>
      <fullMethod>DoUpdateOrderStatus($params = [])</fullMethod>
      <crap>306</crap>
      <complexity>17</complexity>
      <coverage>0</coverage>
      <crapLoad>18</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderController</className>
      <methodName>getMysqlOrderInfo</methodName>
      <methodSignature>getMysqlOrderInfo($params)</methodSignature>
      <fullMethod>getMysqlOrderInfo($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderCountController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderCountController</className>
      <methodName>getCount</methodName>
      <methodSignature>getCount($params)</methodSignature>
      <fullMethod>getCount($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderCountController</className>
      <methodName>_checkParamInfo</methodName>
      <methodSignature>_checkParamInfo($params)</methodSignature>
      <fullMethod>_checkParamInfo($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>setRefund</methodName>
      <methodSignature>setRefund($params)</methodSignature>
      <fullMethod>setRefund($params)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>createRefundBack</methodName>
      <methodSignature>createRefundBack($params)</methodSignature>
      <fullMethod>createRefundBack($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>getAutoRefundBack</methodName>
      <methodSignature>getAutoRefundBack($orderRefund)</methodSignature>
      <fullMethod>getAutoRefundBack($orderRefund)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>getTradeRefundPay</methodName>
      <methodSignature>getTradeRefundPay($params)</methodSignature>
      <fullMethod>getTradeRefundPay($params)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>createRefundPayCallback</methodName>
      <methodSignature>createRefundPayCallback($params)</methodSignature>
      <fullMethod>createRefundPayCallback($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>createRefundBackByAudit</methodName>
      <methodSignature>createRefundBackByAudit($params)</methodSignature>
      <fullMethod>createRefundBackByAudit($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>setReduction</methodName>
      <methodSignature>setReduction($params)</methodSignature>
      <fullMethod>setReduction($params)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>setReductionLog</methodName>
      <methodSignature>setReductionLog($params)</methodSignature>
      <fullMethod>setReductionLog($params)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>getAuditReduction</methodName>
      <methodSignature>getAuditReduction($params)</methodSignature>
      <fullMethod>getAuditReduction($params)</fullMethod>
      <crap>156</crap>
      <complexity>12</complexity>
      <coverage>0</coverage>
      <crapLoad>12</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>_checkOrderInfo</methodName>
      <methodSignature>_checkOrderInfo($orderId)</methodSignature>
      <fullMethod>_checkOrderInfo($orderId)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>_checkOrderInfoReceivable</methodName>
      <methodSignature>_checkOrderInfoReceivable($order)</methodSignature>
      <fullMethod>_checkOrderInfoReceivable($order)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>_checkOrderMoney</methodName>
      <methodSignature>_checkOrderMoney($params, $orderInfo)</methodSignature>
      <fullMethod>_checkOrderMoney($params, $orderInfo)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>_checkOrderInfoRefund</methodName>
      <methodSignature>_checkOrderInfoRefund($order)</methodSignature>
      <fullMethod>_checkOrderInfoRefund($order)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>_checkOrderInfoBase</methodName>
      <methodSignature>_checkOrderInfoBase($order, $params)</methodSignature>
      <fullMethod>_checkOrderInfoBase($order, $params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>_checkOrderMoneyRefund</methodName>
      <methodSignature>_checkOrderMoneyRefund($params, $orderInfo)</methodSignature>
      <fullMethod>_checkOrderMoneyRefund($params, $orderInfo)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>_checkTradeMoneyRefund</methodName>
      <methodSignature>_checkTradeMoneyRefund($params)</methodSignature>
      <fullMethod>_checkTradeMoneyRefund($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>_checkAlreadyAmount</methodName>
      <methodSignature>_checkAlreadyAmount($params, $tradeAmount, $refundAmount)</methodSignature>
      <fullMethod>_checkAlreadyAmount($params, $tradeAmount, $refundAmount)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>DoGetRefundPrice</methodName>
      <methodSignature>DoGetRefundPrice($params = [])</methodSignature>
      <fullMethod>DoGetRefundPrice($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>DoGetRefundPriceNoAudit</methodName>
      <methodSignature>DoGetRefundPriceNoAudit($params = [])</methodSignature>
      <fullMethod>DoGetRefundPriceNoAudit($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>_checkRefundList</methodName>
      <methodSignature>_checkRefundList($params)</methodSignature>
      <fullMethod>_checkRefundList($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>_getRefundTradeParams</methodName>
      <methodSignature>_getRefundTradeParams($refundInfo)</methodSignature>
      <fullMethod>_getRefundTradeParams($refundInfo)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderPayController</className>
      <methodName>_checkRefundBackParams</methodName>
      <methodSignature>_checkRefundBackParams($params)</methodSignature>
      <fullMethod>_checkRefundBackParams($params)</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderStatisticsController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>OrderStatisticsController</className>
      <methodName>financeStatistics</methodName>
      <methodSignature>financeStatistics($params)</methodSignature>
      <fullMethod>financeStatistics($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>PaymentWriteBackController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>PaymentWriteBackController</className>
      <methodName>OrderTradeToAppPayment</methodName>
      <methodSignature>OrderTradeToAppPayment($params = [])</methodSignature>
      <fullMethod>OrderTradeToAppPayment($params = [])</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>PaymentWriteBackController</className>
      <methodName>PaymentWrite</methodName>
      <methodSignature>PaymentWrite($params)</methodSignature>
      <fullMethod>PaymentWrite($params)</fullMethod>
      <crap>210</crap>
      <complexity>14</complexity>
      <coverage>0</coverage>
      <crapLoad>14</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>PaymentWriteBackController</className>
      <methodName>PaymentBackWrite</methodName>
      <methodSignature>PaymentBackWrite($params = [])</methodSignature>
      <fullMethod>PaymentBackWrite($params = [])</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>PaymentWriteBackController</className>
      <methodName>OrderCancelWrite</methodName>
      <methodSignature>OrderCancelWrite($params = [])</methodSignature>
      <fullMethod>OrderCancelWrite($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>PaymentWriteBackController</className>
      <methodName>_checkPaymentWrite</methodName>
      <methodSignature>_checkPaymentWrite($params)</methodSignature>
      <fullMethod>_checkPaymentWrite($params)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>PaymentWriteBackController</className>
      <methodName>PaymentOrderDetail</methodName>
      <methodSignature>PaymentOrderDetail($params = [])</methodSignature>
      <fullMethod>PaymentOrderDetail($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>PaymentWriteBackController</className>
      <methodName>OrderReceivableTotal</methodName>
      <methodSignature>OrderReceivableTotal($params = [])</methodSignature>
      <fullMethod>OrderReceivableTotal($params = [])</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>PaymentWriteBackController</className>
      <methodName>OrderPaymentToCCOrderPayment</methodName>
      <methodSignature>OrderPaymentToCCOrderPayment($params = null)</methodSignature>
      <fullMethod>OrderPaymentToCCOrderPayment($params = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>PaymentWriteBackController</className>
      <methodName>OrderTradeStatusToPaymentStatus</methodName>
      <methodSignature>OrderTradeStatusToPaymentStatus($params = null)</methodSignature>
      <fullMethod>OrderTradeStatusToPaymentStatus($params = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>PaymentWriteBackController</className>
      <methodName>_checkParams</methodName>
      <methodSignature>_checkParams($params = [])</methodSignature>
      <fullMethod>_checkParams($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>RefundReturnController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>RefundReturnController</className>
      <methodName>RefundReturn</methodName>
      <methodSignature>RefundReturn($params = [])</methodSignature>
      <fullMethod>RefundReturn($params = [])</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>RefundReturnController</className>
      <methodName>setRefundCallback</methodName>
      <methodSignature>setRefundCallback($params)</methodSignature>
      <fullMethod>setRefundCallback($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>RefundReturnController</className>
      <methodName>_createRefundInfo</methodName>
      <methodSignature>_createRefundInfo($tardeInfo,$params)</methodSignature>
      <fullMethod>_createRefundInfo($tardeInfo,$params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>RefundReturnController</className>
      <methodName>checkReturnParams</methodName>
      <methodSignature>checkReturnParams($params)</methodSignature>
      <fullMethod>checkReturnParams($params)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>ScriptController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>ScriptController</className>
      <methodName>test</methodName>
      <methodSignature>test()</methodSignature>
      <fullMethod>test()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>ShippingCartController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>ShippingCartController</className>
      <methodName>manage</methodName>
      <methodSignature>manage($params = [])</methodSignature>
      <fullMethod>manage($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>ShippingCartController</className>
      <methodName>add</methodName>
      <methodSignature>add($params = [])</methodSignature>
      <fullMethod>add($params = [])</fullMethod>
      <crap>272</crap>
      <complexity>16</complexity>
      <coverage>0</coverage>
      <crapLoad>17</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>ShippingCartController</className>
      <methodName>del</methodName>
      <methodSignature>del($params = [])</methodSignature>
      <fullMethod>del($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>ShippingCartController</className>
      <methodName>delAll</methodName>
      <methodSignature>delAll($params = [])</methodSignature>
      <fullMethod>delAll($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>ShippingCartController</className>
      <methodName>update</methodName>
      <methodSignature>update($params = [])</methodSignature>
      <fullMethod>update($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>ShippingCartController</className>
      <methodName>get</methodName>
      <methodSignature>get($params = [])</methodSignature>
      <fullMethod>get($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>ShippingCartController</className>
      <methodName>refresh</methodName>
      <methodSignature>refresh($params = [])</methodSignature>
      <fullMethod>refresh($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>createTardeService</methodName>
      <methodSignature>createTardeService($param)</methodSignature>
      <fullMethod>createTardeService($param)</fullMethod>
      <crap>210</crap>
      <complexity>14</complexity>
      <coverage>0</coverage>
      <crapLoad>14</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>setTardeServiceOneToOne</methodName>
      <methodSignature>setTardeServiceOneToOne($paymentlist, $orderlist, $tradeType, &amp;$value)</methodSignature>
      <fullMethod>setTardeServiceOneToOne($paymentlist, $orderlist, $tradeType, &amp;$value)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>setTardeServiceOneToMore</methodName>
      <methodSignature>setTardeServiceOneToMore($paymentlist, $orderlist, $tradeType, &amp;$value)</methodSignature>
      <fullMethod>setTardeServiceOneToMore($paymentlist, $orderlist, $tradeType, &amp;$value)</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>setTardeServiceMoreToOne</methodName>
      <methodSignature>setTardeServiceMoreToOne($paymentlist, $orderlist, $tradeType, &amp;$value)</methodSignature>
      <fullMethod>setTardeServiceMoreToOne($paymentlist, $orderlist, $tradeType, &amp;$value)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>setTardeServiceMoreToMore</methodName>
      <methodSignature>setTardeServiceMoreToMore($paymentlist, $orderlist, $tradeType, &amp;$value)</methodSignature>
      <fullMethod>setTardeServiceMoreToMore($paymentlist, $orderlist, $tradeType, &amp;$value)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>getTradeList</methodName>
      <methodSignature>getTradeList($param)</methodSignature>
      <fullMethod>getTradeList($param)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>getTradeListByField</methodName>
      <methodSignature>getTradeListByField($params)</methodSignature>
      <fullMethod>getTradeListByField($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>getPayResult</methodName>
      <methodSignature>getPayResult($params)</methodSignature>
      <fullMethod>getPayResult($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>getPayResultByOrder</methodName>
      <methodSignature>getPayResultByOrder($params)</methodSignature>
      <fullMethod>getPayResultByOrder($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>getAmountCountNoPay</methodName>
      <methodSignature>getAmountCountNoPay($shouldPay, $alreadyPay)</methodSignature>
      <fullMethod>getAmountCountNoPay($shouldPay, $alreadyPay)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>getPayTransaction</methodName>
      <methodSignature>getPayTransaction($params, $Tid = '')</methodSignature>
      <fullMethod>getPayTransaction($params, $Tid = '')</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>getPayTransactionOne</methodName>
      <methodSignature>getPayTransactionOne($params, $Tid = '')</methodSignature>
      <fullMethod>getPayTransactionOne($params, $Tid = '')</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>createTradeForRefund</methodName>
      <methodSignature>createTradeForRefund($params)</methodSignature>
      <fullMethod>createTradeForRefund($params)</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>getPayPaymentResult</methodName>
      <methodSignature>getPayPaymentResult($params)</methodSignature>
      <fullMethod>getPayPaymentResult($params)</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>getTradeResultList</methodName>
      <methodSignature>getTradeResultList($params)</methodSignature>
      <fullMethod>getTradeResultList($params)</fullMethod>
      <crap>380</crap>
      <complexity>19</complexity>
      <coverage>0</coverage>
      <crapLoad>20</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>getTradeResult</methodName>
      <methodSignature>getTradeResult($params)</methodSignature>
      <fullMethod>getTradeResult($params)</fullMethod>
      <crap>210</crap>
      <complexity>14</complexity>
      <coverage>0</coverage>
      <crapLoad>14</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_checkPaymentInfo</methodName>
      <methodSignature>_checkPaymentInfo($params)</methodSignature>
      <fullMethod>_checkPaymentInfo($params)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_checkOrderInfo</methodName>
      <methodSignature>_checkOrderInfo($params)</methodSignature>
      <fullMethod>_checkOrderInfo($params)</fullMethod>
      <crap>420</crap>
      <complexity>20</complexity>
      <coverage>0</coverage>
      <crapLoad>21</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_checkPayAmount</methodName>
      <methodSignature>_checkPayAmount($paramsOrder, $paramsPay)</methodSignature>
      <fullMethod>_checkPayAmount($paramsOrder, $paramsPay)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_changeParamsPay</methodName>
      <methodSignature>_changeParamsPay($payParams, $orderParams, $tradeSign, $Tid = '')</methodSignature>
      <fullMethod>_changeParamsPay($payParams, $orderParams, $tradeSign, $Tid = '')</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_changeParamsPayOne</methodName>
      <methodSignature>_changeParamsPayOne($payParams, $orderParams, $tradeSign, $Tid = '')</methodSignature>
      <fullMethod>_changeParamsPayOne($payParams, $orderParams, $tradeSign, $Tid = '')</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_changeParamsTrade</methodName>
      <methodSignature>_changeParamsTrade($payParams, $orderParams, $tradeSign, $info, $tradeType, $amount, $payType)</methodSignature>
      <fullMethod>_changeParamsTrade($payParams, $orderParams, $tradeSign, $info, $tradeType, $amount, $payType)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_partitionParams</methodName>
      <methodSignature>_partitionParams(&amp;$orderParams, $surplusAmount)</methodSignature>
      <fullMethod>_partitionParams(&amp;$orderParams, $surplusAmount)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_getApproach</methodName>
      <methodSignature>_getApproach($array, $val, $k)</methodSignature>
      <fullMethod>_getApproach($array, $val, $k)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_getApproachByValue</methodName>
      <methodSignature>_getApproachByValue($array, $val, $k)</methodSignature>
      <fullMethod>_getApproachByValue($array, $val, $k)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_createTempOrderInfo</methodName>
      <methodSignature>_createTempOrderInfo($params, $amount)</methodSignature>
      <fullMethod>_createTempOrderInfo($params, $amount)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_getPayOnlineOffline</methodName>
      <methodSignature>_getPayOnlineOffline($serviceId)</methodSignature>
      <fullMethod>_getPayOnlineOffline($serviceId)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_getPayServiceConfig</methodName>
      <methodSignature>_getPayServiceConfig($config = '')</methodSignature>
      <fullMethod>_getPayServiceConfig($config = '')</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_getPayRefund</methodName>
      <methodSignature>_getPayRefund($params)</methodSignature>
      <fullMethod>_getPayRefund($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_createRefundIdReturnPayment</methodName>
      <methodSignature>_createRefundIdReturnPayment($params = [])</methodSignature>
      <fullMethod>_createRefundIdReturnPayment($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_getTradeListEqtAmount</methodName>
      <methodSignature>_getTradeListEqtAmount($params)</methodSignature>
      <fullMethod>_getTradeListEqtAmount($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_partitionParamsByRefund</methodName>
      <methodSignature>_partitionParamsByRefund($tradeParams, $surplusAmount)</methodSignature>
      <fullMethod>_partitionParamsByRefund($tradeParams, $surplusAmount)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_createTempTradeInfo</methodName>
      <methodSignature>_createTempTradeInfo($params, $amount)</methodSignature>
      <fullMethod>_createTempTradeInfo($params, $amount)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_changeTradeForRefund</methodName>
      <methodSignature>_changeTradeForRefund($params, $tradeSign, $info, $reason, $orderRefundId)</methodSignature>
      <fullMethod>_changeTradeForRefund($params, $tradeSign, $info, $reason, $orderRefundId)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_getParamsPayRefund</methodName>
      <methodSignature>_getParamsPayRefund($params, $refund)</methodSignature>
      <fullMethod>_getParamsPayRefund($params, $refund)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_getPaymentResult</methodName>
      <methodSignature>_getPaymentResult($params)</methodSignature>
      <fullMethod>_getPaymentResult($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_checkPayResult</methodName>
      <methodSignature>_checkPayResult($orderList)</methodSignature>
      <fullMethod>_checkPayResult($orderList)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_getTradeTransactionIdOn</methodName>
      <methodSignature>_getTradeTransactionIdOn($orderId, $paymentId, $amount)</methodSignature>
      <fullMethod>_getTradeTransactionIdOn($orderId, $paymentId, $amount)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_checkRepeatPay</methodName>
      <methodSignature>_checkRepeatPay($arr, $key = 'payment_mode')</methodSignature>
      <fullMethod>_checkRepeatPay($arr, $key = 'payment_mode')</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_checkRepeatOrder</methodName>
      <methodSignature>_checkRepeatOrder($arr, $key = 'order_no')</methodSignature>
      <fullMethod>_checkRepeatOrder($arr, $key = 'order_no')</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>array_unique_bykey</methodName>
      <methodSignature>array_unique_bykey($arr, $key)</methodSignature>
      <fullMethod>array_unique_bykey($arr, $key)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>_checkRefundAmount</methodName>
      <methodSignature>_checkRefundAmount($params, $tradeList)</methodSignature>
      <fullMethod>_checkRefundAmount($params, $tradeList)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>createTardeServiceLog</methodName>
      <methodSignature>createTardeServiceLog($params = [])</methodSignature>
      <fullMethod>createTardeServiceLog($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>createTardeForRefundLog</methodName>
      <methodSignature>createTardeForRefundLog($params = [])</methodSignature>
      <fullMethod>createTardeForRefundLog($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>getPayTransactionLog</methodName>
      <methodSignature>getPayTransactionLog($params = [])</methodSignature>
      <fullMethod>getPayTransactionLog($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>getPayTransactionErrorLog</methodName>
      <methodSignature>getPayTransactionErrorLog($params = [])</methodSignature>
      <fullMethod>getPayTransactionErrorLog($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>getPaymentResultPayLog</methodName>
      <methodSignature>getPaymentResultPayLog($params = [])</methodSignature>
      <fullMethod>getPaymentResultPayLog($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeController</className>
      <methodName>getPaymentResultLog</methodName>
      <methodSignature>getPaymentResultLog($params = [])</methodSignature>
      <fullMethod>getPaymentResultLog($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeReturnController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeReturnController</className>
      <methodName>TradeReturn</methodName>
      <methodSignature>TradeReturn($params = [])</methodSignature>
      <fullMethod>TradeReturn($params = [])</fullMethod>
      <crap>210</crap>
      <complexity>14</complexity>
      <coverage>0</coverage>
      <crapLoad>14</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeReturnController</className>
      <methodName>setOrderRelatedPayInfo</methodName>
      <methodSignature>setOrderRelatedPayInfo($params, $trade_list)</methodSignature>
      <fullMethod>setOrderRelatedPayInfo($params, $trade_list)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeReturnController</className>
      <methodName>setOrderPayCallback</methodName>
      <methodSignature>setOrderPayCallback($params)</methodSignature>
      <fullMethod>setOrderPayCallback($params)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeReturnController</className>
      <methodName>_getOrderAmount</methodName>
      <methodSignature>_getOrderAmount($params)</methodSignature>
      <fullMethod>_getOrderAmount($params)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeReturnController</className>
      <methodName>_mySort</methodName>
      <methodSignature>_mySort($arrays, $key, $order = SORT_ASC, $type = SORT_NUMERIC)</methodSignature>
      <fullMethod>_mySort($arrays, $key, $order = SORT_ASC, $type = SORT_NUMERIC)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeReturnController</className>
      <methodName>_getParamsApproach</methodName>
      <methodSignature>_getParamsApproach($array, $val, $k)</methodSignature>
      <fullMethod>_getParamsApproach($array, $val, $k)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeReturnController</className>
      <methodName>_createOrderPaymentInfo</methodName>
      <methodSignature>_createOrderPaymentInfo($orderNo,$cityId)</methodSignature>
      <fullMethod>_createOrderPaymentInfo($orderNo,$cityId)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeReturnController</className>
      <methodName>_getOnlineParams</methodName>
      <methodSignature>_getOnlineParams($orderNo,$status,$cityId,$buildParams,$payType)</methodSignature>
      <fullMethod>_getOnlineParams($orderNo,$status,$cityId,$buildParams,$payType)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeReturnController</className>
      <methodName>createTardeForRefundSuccessLog</methodName>
      <methodSignature>createTardeForRefundSuccessLog($params = [])</methodSignature>
      <fullMethod>createTardeForRefundSuccessLog($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeReturnController</className>
      <methodName>createTardeForRefundLog</methodName>
      <methodSignature>createTardeForRefundLog($params = [])</methodSignature>
      <fullMethod>createTardeForRefundLog($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeReturnController</className>
      <methodName>doPaymentCallbackLog</methodName>
      <methodSignature>doPaymentCallbackLog($params = [])</methodSignature>
      <fullMethod>doPaymentCallbackLog($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeReturnController</className>
      <methodName>createTardeForRefundAll</methodName>
      <methodSignature>createTardeForRefundAll($params = [])</methodSignature>
      <fullMethod>createTardeForRefundAll($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeServiceController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>TradeServiceController</className>
      <methodName>getAllTradeList</methodName>
      <methodSignature>getAllTradeList($params = [])</methodSignature>
      <fullMethod>getAllTradeList($params = [])</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>UnpaymentRecordController</className>
      <methodName>getStatus</methodName>
      <methodSignature>getStatus()</methodSignature>
      <fullMethod>getStatus()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>UnpaymentRecordController</className>
      <methodName>getType</methodName>
      <methodSignature>getType()</methodSignature>
      <fullMethod>getType()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>UnpaymentRecordController</className>
      <methodName>getList</methodName>
      <methodSignature>getList($params = [])</methodSignature>
      <fullMethod>getList($params = [])</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>UnpaymentRecordController</className>
      <methodName>process</methodName>
      <methodSignature>process($params = [])</methodSignature>
      <fullMethod>process($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>UnpaymentRecordController</className>
      <methodName>info</methodName>
      <methodSignature>info($params = [])</methodSignature>
      <fullMethod>info($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>UnpaymentRecordController</className>
      <methodName>add</methodName>
      <methodSignature>add($params = [])</methodSignature>
      <fullMethod>add($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>UnpaymentRecordController</className>
      <methodName>getOrderUnpayment</methodName>
      <methodSignature>getOrderUnpayment($params = [])</methodSignature>
      <fullMethod>getOrderUnpayment($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>UserController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Controller</package>
      <className>UserController</className>
      <methodName>getUserPayPrice</methodName>
      <methodSignature>getUserPayPrice(array $params = [])</methodSignature>
      <fullMethod>getUserPayPrice(array $params = [])</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>AreaModel</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($info)</methodSignature>
      <fullMethod>__construct($info)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>AreaModel</className>
      <methodName>inst</methodName>
      <methodSignature>inst($params = [])</methodSignature>
      <fullMethod>inst($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>AreaModel</className>
      <methodName>isCanBuy</methodName>
      <methodSignature>isCanBuy()</methodSignature>
      <fullMethod>isCanBuy()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>BuyerAddressDataModel</className>
      <methodName>batchInsertBuyerAddress</methodName>
      <methodSignature>batchInsertBuyerAddress($params = [])</methodSignature>
      <fullMethod>batchInsertBuyerAddress($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>BuyerAddressDataModel</className>
      <methodName>addData</methodName>
      <methodSignature>addData($params = [])</methodSignature>
      <fullMethod>addData($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>BuyerAddressDataModel</className>
      <methodName>saveBuyerAddress</methodName>
      <methodSignature>saveBuyerAddress($where, $params)</methodSignature>
      <fullMethod>saveBuyerAddress($where, $params)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>BuyerInvoiceDataModel</className>
      <methodName>batchInsertBuyerInvoice</methodName>
      <methodSignature>batchInsertBuyerInvoice($params = [])</methodSignature>
      <fullMethod>batchInsertBuyerInvoice($params = [])</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>BuyerInvoiceDataModel</className>
      <methodName>addData</methodName>
      <methodSignature>addData($params = [])</methodSignature>
      <fullMethod>addData($params = [])</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>BuyerInvoiceDataModel</className>
      <methodName>saveBuyerInvoice</methodName>
      <methodSignature>saveBuyerInvoice($where, $params)</methodSignature>
      <fullMethod>saveBuyerInvoice($where, $params)</fullMethod>
      <crap>156</crap>
      <complexity>12</complexity>
      <coverage>0</coverage>
      <crapLoad>12</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>BuyerInvoiceDataModel</className>
      <methodName>getInvoiceDetails</methodName>
      <methodSignature>getInvoiceDetails($invoice)</methodSignature>
      <fullMethod>getInvoiceDetails($invoice)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>CartModel</className>
      <methodName>getCartInfo</methodName>
      <methodSignature>getCartInfo($params = [], $getMaster = 0)</methodSignature>
      <fullMethod>getCartInfo($params = [], $getMaster = 0)</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>CheckOrderFlowModel</className>
      <methodName>checkParamsCreateOrder</methodName>
      <methodSignature>checkParamsCreateOrder(&amp;$parmas)</methodSignature>
      <fullMethod>checkParamsCreateOrder(&amp;$parmas)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>CheckOrderFlowModel</className>
      <methodName>checkParamsUpdateOrder</methodName>
      <methodSignature>checkParamsUpdateOrder(&amp;$params)</methodSignature>
      <fullMethod>checkParamsUpdateOrder(&amp;$params)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>CheckOrderFlowModel</className>
      <methodName>checkBaseInfo</methodName>
      <methodSignature>checkBaseInfo(&amp;$params)</methodSignature>
      <fullMethod>checkBaseInfo(&amp;$params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>CheckOrderFlowModel</className>
      <methodName>checkRepeatOrder</methodName>
      <methodSignature>checkRepeatOrder($params)</methodSignature>
      <fullMethod>checkRepeatOrder($params)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>CheckOrderFlowModel</className>
      <methodName>completionUserInfo</methodName>
      <methodSignature>completionUserInfo(&amp;$params)</methodSignature>
      <fullMethod>completionUserInfo(&amp;$params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>CheckOrderFlowModel</className>
      <methodName>checkCityAreaInfo</methodName>
      <methodSignature>checkCityAreaInfo(&amp;$params)</methodSignature>
      <fullMethod>checkCityAreaInfo(&amp;$params)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>CheckOrderFlowModel</className>
      <methodName>checkAddressInfo</methodName>
      <methodSignature>checkAddressInfo(&amp;$params)</methodSignature>
      <fullMethod>checkAddressInfo(&amp;$params)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>CheckOrderFlowModel</className>
      <methodName>checkSellerInfo</methodName>
      <methodSignature>checkSellerInfo(&amp;$params)</methodSignature>
      <fullMethod>checkSellerInfo(&amp;$params)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>CheckOrderFlowModel</className>
      <methodName>checkFoodInfo</methodName>
      <methodSignature>checkFoodInfo(&amp;$params)</methodSignature>
      <fullMethod>checkFoodInfo(&amp;$params)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>CityModel</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($info)</methodSignature>
      <fullMethod>__construct($info)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>CityModel</className>
      <methodName>inst</methodName>
      <methodSignature>inst($city_id)</methodSignature>
      <fullMethod>inst($city_id)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>CityModel</className>
      <methodName>isCanBuy</methodName>
      <methodSignature>isCanBuy()</methodSignature>
      <fullMethod>isCanBuy()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>FoodModel</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($params)</methodSignature>
      <fullMethod>__construct($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>FoodModel</className>
      <methodName>inst</methodName>
      <methodSignature>inst($params)</methodSignature>
      <fullMethod>inst($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>FoodModel</className>
      <methodName>getInst</methodName>
      <methodSignature>getInst($food_id)</methodSignature>
      <fullMethod>getInst($food_id)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>FoodModel</className>
      <methodName>isCanBuy</methodName>
      <methodSignature>isCanBuy($buy_food)</methodSignature>
      <fullMethod>isCanBuy($buy_food)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>FoodModel</className>
      <methodName>subFoodCheck</methodName>
      <methodSignature>subFoodCheck($buy_food)</methodSignature>
      <fullMethod>subFoodCheck($buy_food)</fullMethod>
      <crap>380</crap>
      <complexity>19</complexity>
      <coverage>0</coverage>
      <crapLoad>20</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>FoodModel</className>
      <methodName>getFoodCategoryTotal</methodName>
      <methodSignature>getFoodCategoryTotal($seller_id)</methodSignature>
      <fullMethod>getFoodCategoryTotal($seller_id)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>FoodModel</className>
      <methodName>getFoodList</methodName>
      <methodSignature>getFoodList($seller_id)</methodSignature>
      <fullMethod>getFoodList($seller_id)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderAttributeDataModel</className>
      <methodName>batchInsertOrderAttribute</methodName>
      <methodSignature>batchInsertOrderAttribute($params = [])</methodSignature>
      <fullMethod>batchInsertOrderAttribute($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderAttributeDataModel</className>
      <methodName>addData</methodName>
      <methodSignature>addData($params = [])</methodSignature>
      <fullMethod>addData($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderChangeModel</className>
      <methodName>updateOrderBefore</methodName>
      <methodSignature>updateOrderBefore(&amp;$order_params, $last_order_info)</methodSignature>
      <fullMethod>updateOrderBefore(&amp;$order_params, $last_order_info)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderChangeModel</className>
      <methodName>updateOrderAfter</methodName>
      <methodSignature>updateOrderAfter($order_params, $last_order_info)</methodSignature>
      <fullMethod>updateOrderAfter($order_params, $last_order_info)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderChangeModel</className>
      <methodName>updateOrder</methodName>
      <methodSignature>updateOrder($order_params)</methodSignature>
      <fullMethod>updateOrder($order_params)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderChangeModel</className>
      <methodName>formatOrderValue</methodName>
      <methodSignature>formatOrderValue(&amp;$order_params)</methodSignature>
      <fullMethod>formatOrderValue(&amp;$order_params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderChangeModel</className>
      <methodName>DataToBack</methodName>
      <methodSignature>DataToBack($info, $status)</methodSignature>
      <fullMethod>DataToBack($info, $status)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderChangeSoacrontabModel</className>
      <methodName>process</methodName>
      <methodSignature>process(array $params)</methodSignature>
      <fullMethod>process(array $params)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderChangeSoacrontabModel</className>
      <methodName>updateOrderBefore</methodName>
      <methodSignature>updateOrderBefore(&amp;$order_params, $last_order_info)</methodSignature>
      <fullMethod>updateOrderBefore(&amp;$order_params, $last_order_info)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderChangeSoacrontabModel</className>
      <methodName>updateOrderAfter</methodName>
      <methodSignature>updateOrderAfter($order_params, $last_order_info)</methodSignature>
      <fullMethod>updateOrderAfter($order_params, $last_order_info)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderChangeSoacrontabModel</className>
      <methodName>unsetUpdateFields</methodName>
      <methodSignature>unsetUpdateFields(&amp;$order_params)</methodSignature>
      <fullMethod>unsetUpdateFields(&amp;$order_params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderChangeSoacrontabModel</className>
      <methodName>calcPaymentInfo</methodName>
      <methodSignature>calcPaymentInfo(&amp;$order_info)</methodSignature>
      <fullMethod>calcPaymentInfo(&amp;$order_info)</fullMethod>
      <crap>870</crap>
      <complexity>29</complexity>
      <coverage>0</coverage>
      <crapLoad>30</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderChangeSoacrontabModel</className>
      <methodName>switchOrderStatus</methodName>
      <methodSignature>switchOrderStatus(&amp;$order_info, $last_order)</methodSignature>
      <fullMethod>switchOrderStatus(&amp;$order_info, $last_order)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderChangeSoacrontabModel</className>
      <methodName>completionOrderStatus</methodName>
      <methodSignature>completionOrderStatus(&amp;$order_info, $last_order = [])</methodSignature>
      <fullMethod>completionOrderStatus(&amp;$order_info, $last_order = [])</fullMethod>
      <crap>552</crap>
      <complexity>23</complexity>
      <coverage>0</coverage>
      <crapLoad>24</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderChangeSoacrontabModel</className>
      <methodName>paramsSwitch</methodName>
      <methodSignature>paramsSwitch($params, $field_switch)</methodSignature>
      <fullMethod>paramsSwitch($params, $field_switch)</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderChangeSoacrontabModel</className>
      <methodName>calcOrderPriceInfo</methodName>
      <methodSignature>calcOrderPriceInfo($order_params, &amp;$order_price_params)</methodSignature>
      <fullMethod>calcOrderPriceInfo($order_params, &amp;$order_price_params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderChangeSoacrontabModel</className>
      <methodName>calcMysqlTblOrderInfo</methodName>
      <methodSignature>calcMysqlTblOrderInfo(&amp;$order_params, &amp;$mysql_tbl_order_params)</methodSignature>
      <fullMethod>calcMysqlTblOrderInfo(&amp;$order_params, &amp;$mysql_tbl_order_params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderDataModel</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderDataModel</className>
      <methodName>insertOrder</methodName>
      <methodSignature>insertOrder($data)</methodSignature>
      <fullMethod>insertOrder($data)</fullMethod>
      <crap>5852</crap>
      <complexity>76</complexity>
      <coverage>0</coverage>
      <crapLoad>79</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderDataModel</className>
      <methodName>updateOrder</methodName>
      <methodSignature>updateOrder($params = [])</methodSignature>
      <fullMethod>updateOrder($params = [])</fullMethod>
      <crap>2256</crap>
      <complexity>47</complexity>
      <coverage>0</coverage>
      <crapLoad>49</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderDataModel</className>
      <methodName>modifyOrder</methodName>
      <methodSignature>modifyOrder($params = [])</methodSignature>
      <fullMethod>modifyOrder($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderDataModel</className>
      <methodName>batchUpdateOrderId</methodName>
      <methodSignature>batchUpdateOrderId($params = [])</methodSignature>
      <fullMethod>batchUpdateOrderId($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderDataModel</className>
      <methodName>getCountByParams</methodName>
      <methodSignature>getCountByParams($params, $where_bulid)</methodSignature>
      <fullMethod>getCountByParams($params, $where_bulid)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderDataModel</className>
      <methodName>getSelectByParams</methodName>
      <methodSignature>getSelectByParams($params, $where_bulid)</methodSignature>
      <fullMethod>getSelectByParams($params, $where_bulid)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderDataModel</className>
      <methodName>getOrder</methodName>
      <methodSignature>getOrder($params)</methodSignature>
      <fullMethod>getOrder($params)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderDataModel</className>
      <methodName>getLimit</methodName>
      <methodSignature>getLimit($params)</methodSignature>
      <fullMethod>getLimit($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderDataModel</className>
      <methodName>getOrderOneDetail</methodName>
      <methodSignature>getOrderOneDetail($params = [])</methodSignature>
      <fullMethod>getOrderOneDetail($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderItemDataModel</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderItemDataModel</className>
      <methodName>batchInsertOrderItem</methodName>
      <methodSignature>batchInsertOrderItem($params = [])</methodSignature>
      <fullMethod>batchInsertOrderItem($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderItemDataModel</className>
      <methodName>addOrderItemData</methodName>
      <methodSignature>addOrderItemData($params = [])</methodSignature>
      <fullMethod>addOrderItemData($params = [])</fullMethod>
      <crap>272</crap>
      <complexity>16</complexity>
      <coverage>0</coverage>
      <crapLoad>17</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderItemDataModel</className>
      <methodName>deleteOrderItemData</methodName>
      <methodSignature>deleteOrderItemData($params = [])</methodSignature>
      <fullMethod>deleteOrderItemData($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderItemDataModel</className>
      <methodName>buildOrderProdID</methodName>
      <methodSignature>buildOrderProdID($params = [])</methodSignature>
      <fullMethod>buildOrderProdID($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderItemDataModel</className>
      <methodName>getOrderItemNextId</methodName>
      <methodSignature>getOrderItemNextId()</methodSignature>
      <fullMethod>getOrderItemNextId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderItemServiceModel</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderItemServiceModel</className>
      <methodName>updateOrderItemDiff</methodName>
      <methodSignature>updateOrderItemDiff($params = [])</methodSignature>
      <fullMethod>updateOrderItemDiff($params = [])</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderPriceChangeDataModel</className>
      <methodName>batchInsertOrderPriceChange</methodName>
      <methodSignature>batchInsertOrderPriceChange($params = [])</methodSignature>
      <fullMethod>batchInsertOrderPriceChange($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderPriceChangeDataModel</className>
      <methodName>createChange</methodName>
      <methodSignature>createChange($params)</methodSignature>
      <fullMethod>createChange($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderPriceChangeDataModel</className>
      <methodName>getChangeList</methodName>
      <methodSignature>getChangeList($params  = [])</methodSignature>
      <fullMethod>getChangeList($params  = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderPriceChangeDataModel</className>
      <methodName>getOrderPriceChangeNextId</methodName>
      <methodSignature>getOrderPriceChangeNextId()</methodSignature>
      <fullMethod>getOrderPriceChangeNextId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderPriceDataModel</className>
      <methodName>batchInsertOrderPrice</methodName>
      <methodSignature>batchInsertOrderPrice($params = [])</methodSignature>
      <fullMethod>batchInsertOrderPrice($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderPriceDataModel</className>
      <methodName>addOrderFinance</methodName>
      <methodSignature>addOrderFinance($params)</methodSignature>
      <fullMethod>addOrderFinance($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderPriceDataModel</className>
      <methodName>saveOrderFinance</methodName>
      <methodSignature>saveOrderFinance($params)</methodSignature>
      <fullMethod>saveOrderFinance($params)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderPriceDataModel</className>
      <methodName>getOrderFinance</methodName>
      <methodSignature>getOrderFinance($params = [])</methodSignature>
      <fullMethod>getOrderFinance($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderPriceDataModel</className>
      <methodName>getOrderPriceNextId</methodName>
      <methodSignature>getOrderPriceNextId()</methodSignature>
      <fullMethod>getOrderPriceNextId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderProdGroupDataModel</className>
      <methodName>batchInsertOrderGroup</methodName>
      <methodSignature>batchInsertOrderGroup($params = [])</methodSignature>
      <fullMethod>batchInsertOrderGroup($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderProdGroupDataModel</className>
      <methodName>addOrderProdGroupData</methodName>
      <methodSignature>addOrderProdGroupData($params)</methodSignature>
      <fullMethod>addOrderProdGroupData($params)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderProdGroupDataModel</className>
      <methodName>deleteOrderGroupItemData</methodName>
      <methodSignature>deleteOrderGroupItemData($params = [])</methodSignature>
      <fullMethod>deleteOrderGroupItemData($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderProdGroupDataModel</className>
      <methodName>getOrderGroupNextId</methodName>
      <methodSignature>getOrderGroupNextId()</methodSignature>
      <fullMethod>getOrderGroupNextId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderProdNormalDataModel</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderProdNormalDataModel</className>
      <methodName>batchInsertOrderNormalItem</methodName>
      <methodSignature>batchInsertOrderNormalItem($params = [])</methodSignature>
      <fullMethod>batchInsertOrderNormalItem($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderProdNormalDataModel</className>
      <methodName>addOrderProdNormalData</methodName>
      <methodSignature>addOrderProdNormalData($params)</methodSignature>
      <fullMethod>addOrderProdNormalData($params)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderProdNormalDataModel</className>
      <methodName>deleteData</methodName>
      <methodSignature>deleteData($params)</methodSignature>
      <fullMethod>deleteData($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderProdNormalDataModel</className>
      <methodName>deleteOrderNormalItemData</methodName>
      <methodSignature>deleteOrderNormalItemData($params = [])</methodSignature>
      <fullMethod>deleteOrderNormalItemData($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderProdNormalDataModel</className>
      <methodName>getOrderNormalNextId</methodName>
      <methodSignature>getOrderNormalNextId()</methodSignature>
      <fullMethod>getOrderNormalNextId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>manageOrderMainWork</methodName>
      <methodSignature>manageOrderMainWork($params = [])</methodSignature>
      <fullMethod>manageOrderMainWork($params = [])</fullMethod>
      <crap>506</crap>
      <complexity>22</complexity>
      <coverage>0</coverage>
      <crapLoad>23</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>splitOrderReturnOrder</methodName>
      <methodSignature>splitOrderReturnOrder($params = [], $act = 'create')</methodSignature>
      <fullMethod>splitOrderReturnOrder($params = [], $act = 'create')</fullMethod>
      <crap>1722</crap>
      <complexity>41</complexity>
      <coverage>0</coverage>
      <crapLoad>42</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>splitOrderItemReturnItem</methodName>
      <methodSignature>splitOrderItemReturnItem($params = [])</methodSignature>
      <fullMethod>splitOrderItemReturnItem($params = [])</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>applyCoupon</methodName>
      <methodSignature>applyCoupon($params = [])</methodSignature>
      <fullMethod>applyCoupon($params = [])</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>buildOrderSn</methodName>
      <methodSignature>buildOrderSn($params)</methodSignature>
      <fullMethod>buildOrderSn($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>getCostParams</methodName>
      <methodSignature>getCostParams(&amp;$params)</methodSignature>
      <fullMethod>getCostParams(&amp;$params)</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>addDataAndQueue</methodName>
      <methodSignature>addDataAndQueue($params = [])</methodSignature>
      <fullMethod>addDataAndQueue($params = [])</fullMethod>
      <crap>156</crap>
      <complexity>12</complexity>
      <coverage>0</coverage>
      <crapLoad>12</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>addOrderPriceChange</methodName>
      <methodSignature>addOrderPriceChange($params = [])</methodSignature>
      <fullMethod>addOrderPriceChange($params = [])</fullMethod>
      <crap>272</crap>
      <complexity>16</complexity>
      <coverage>0</coverage>
      <crapLoad>17</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>orderTypeAddQueue</methodName>
      <methodSignature>orderTypeAddQueue($params = [])</methodSignature>
      <fullMethod>orderTypeAddQueue($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>orderUrgent</methodName>
      <methodSignature>orderUrgent($params = [])</methodSignature>
      <fullMethod>orderUrgent($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>getOrderList</methodName>
      <methodSignature>getOrderList($params = [])</methodSignature>
      <fullMethod>getOrderList($params = [])</fullMethod>
      <crap>1190</crap>
      <complexity>34</complexity>
      <coverage>0</coverage>
      <crapLoad>35</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>getSearchOrderField</methodName>
      <methodSignature>getSearchOrderField($params = null)</methodSignature>
      <fullMethod>getSearchOrderField($params = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>getOrderInfoMore</methodName>
      <methodSignature>getOrderInfoMore($params = [])</methodSignature>
      <fullMethod>getOrderInfoMore($params = [])</fullMethod>
      <crap>552</crap>
      <complexity>23</complexity>
      <coverage>0</coverage>
      <crapLoad>24</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>getOrderInfoFormatMysql</methodName>
      <methodSignature>getOrderInfoFormatMysql($order_no)</methodSignature>
      <fullMethod>getOrderInfoFormatMysql($order_no)</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>backOrderDetail</methodName>
      <methodSignature>backOrderDetail($params = [])</methodSignature>
      <fullMethod>backOrderDetail($params = [])</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>_returnItemStockParams</methodName>
      <methodSignature>_returnItemStockParams($params = [])</methodSignature>
      <fullMethod>_returnItemStockParams($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>orderAudit</methodName>
      <methodSignature>orderAudit($params)</methodSignature>
      <fullMethod>orderAudit($params)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>splitOrderPaid</methodName>
      <methodSignature>splitOrderPaid($params = [])</methodSignature>
      <fullMethod>splitOrderPaid($params = [])</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>PaymentBackUpdateOrder</methodName>
      <methodSignature>PaymentBackUpdateOrder($params = [])</methodSignature>
      <fullMethod>PaymentBackUpdateOrder($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>getOrderPaymentMode</methodName>
      <methodSignature>getOrderPaymentMode($params)</methodSignature>
      <fullMethod>getOrderPaymentMode($params)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>cancelOrder</methodName>
      <methodSignature>cancelOrder($params = [])</methodSignature>
      <fullMethod>cancelOrder($params = [])</fullMethod>
      <crap>182</crap>
      <complexity>13</complexity>
      <coverage>0</coverage>
      <crapLoad>13</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>switchCancelCause</methodName>
      <methodSignature>switchCancelCause($new_cause)</methodSignature>
      <fullMethod>switchCancelCause($new_cause)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>splitPaymentPrice</methodName>
      <methodSignature>splitPaymentPrice($params = [])</methodSignature>
      <fullMethod>splitPaymentPrice($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>paymentModeToOrderMode</methodName>
      <methodSignature>paymentModeToOrderMode($mode = '')</methodSignature>
      <fullMethod>paymentModeToOrderMode($mode = '')</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>platformTypeConfig</methodName>
      <methodSignature>platformTypeConfig($source)</methodSignature>
      <fullMethod>platformTypeConfig($source)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>orderSnapshot</methodName>
      <methodSignature>orderSnapshot($params, $order_info)</methodSignature>
      <fullMethod>orderSnapshot($params, $order_info)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>saveOrderDataAndQueue</methodName>
      <methodSignature>saveOrderDataAndQueue($params = [])</methodSignature>
      <fullMethod>saveOrderDataAndQueue($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>saveOrderData</methodName>
      <methodSignature>saveOrderData($params = [])</methodSignature>
      <fullMethod>saveOrderData($params = [])</fullMethod>
      <crap>182</crap>
      <complexity>13</complexity>
      <coverage>0</coverage>
      <crapLoad>13</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>getOrderSnapshot</methodName>
      <methodSignature>getOrderSnapshot($params)</methodSignature>
      <fullMethod>getOrderSnapshot($params)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>orderSnapshotFormat</methodName>
      <methodSignature>orderSnapshotFormat($previous_list)</methodSignature>
      <fullMethod>orderSnapshotFormat($previous_list)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderServiceModel</className>
      <methodName>orderSnapshotFormatShipping</methodName>
      <methodSignature>orderSnapshotFormatShipping($previous_list)</methodSignature>
      <fullMethod>orderSnapshotFormatShipping($previous_list)</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>UpdateOrderStatus</methodName>
      <methodSignature>UpdateOrderStatus($params)</methodSignature>
      <fullMethod>UpdateOrderStatus($params)</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>getOrderStatus</methodName>
      <methodSignature>getOrderStatus($params = [])</methodSignature>
      <fullMethod>getOrderStatus($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>orderStatusConfig</methodName>
      <methodSignature>orderStatusConfig($params)</methodSignature>
      <fullMethod>orderStatusConfig($params)</fullMethod>
      <crap>992</crap>
      <complexity>31</complexity>
      <coverage>0</coverage>
      <crapLoad>32</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>getOrderStatusFromRule</methodName>
      <methodSignature>getOrderStatusFromRule($params = [])</methodSignature>
      <fullMethod>getOrderStatusFromRule($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>getMainStatus</methodName>
      <methodSignature>getMainStatus($key = '')</methodSignature>
      <fullMethod>getMainStatus($key = '')</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>getAuditStatus</methodName>
      <methodSignature>getAuditStatus($key = '')</methodSignature>
      <fullMethod>getAuditStatus($key = '')</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>getSellerStatus</methodName>
      <methodSignature>getSellerStatus($key = '')</methodSignature>
      <fullMethod>getSellerStatus($key = '')</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>getDeliverStatus</methodName>
      <methodSignature>getDeliverStatus($key = '')</methodSignature>
      <fullMethod>getDeliverStatus($key = '')</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>getFinancialStatus</methodName>
      <methodSignature>getFinancialStatus($key = '')</methodSignature>
      <fullMethod>getFinancialStatus($key = '')</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>getPaymentStatus</methodName>
      <methodSignature>getPaymentStatus($key)</methodSignature>
      <fullMethod>getPaymentStatus($key)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>getNormalOrderStatus</methodName>
      <methodSignature>getNormalOrderStatus($params = [])</methodSignature>
      <fullMethod>getNormalOrderStatus($params = [])</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>freeOrderAuditRule</methodName>
      <methodSignature>freeOrderAuditRule($params = [])</methodSignature>
      <fullMethod>freeOrderAuditRule($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>checkSellerStatus</methodName>
      <methodSignature>checkSellerStatus($order_info, $type)</methodSignature>
      <fullMethod>checkSellerStatus($order_info, $type)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>checkDeliverStatus</methodName>
      <methodSignature>checkDeliverStatus($order_info, $type)</methodSignature>
      <fullMethod>checkDeliverStatus($order_info, $type)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>checkFinancialStatus</methodName>
      <methodSignature>checkFinancialStatus($type)</methodSignature>
      <fullMethod>checkFinancialStatus($type)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderStatusServiceModel</className>
      <methodName>getOrderStatusMsg</methodName>
      <methodSignature>getOrderStatusMsg(&amp;$o_info)</methodSignature>
      <fullMethod>getOrderStatusMsg(&amp;$o_info)</fullMethod>
      <crap>702</crap>
      <complexity>26</complexity>
      <coverage>0</coverage>
      <crapLoad>27</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderWriteBackModel</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderWriteBackModel</className>
      <methodName>calcCommonData</methodName>
      <methodSignature>calcCommonData(&amp;$order_info)</methodSignature>
      <fullMethod>calcCommonData(&amp;$order_info)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderWriteBackModel</className>
      <methodName>calcPaymentInfo</methodName>
      <methodSignature>calcPaymentInfo(&amp;$order_info)</methodSignature>
      <fullMethod>calcPaymentInfo(&amp;$order_info)</fullMethod>
      <crap>462</crap>
      <complexity>21</complexity>
      <coverage>0</coverage>
      <crapLoad>22</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderWriteBackModel</className>
      <methodName>calcFinancePrice</methodName>
      <methodSignature>calcFinancePrice(&amp;$order_info, $calc_arrear = true)</methodSignature>
      <fullMethod>calcFinancePrice(&amp;$order_info, $calc_arrear = true)</fullMethod>
      <crap>2756</crap>
      <complexity>52</complexity>
      <coverage>0</coverage>
      <crapLoad>54</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>OrderWriteBackModel</className>
      <methodName>calcMasterOrderId</methodName>
      <methodSignature>calcMasterOrderId(&amp;$order_info)</methodSignature>
      <fullMethod>calcMasterOrderId(&amp;$order_info)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>SellerModel</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($params)</methodSignature>
      <fullMethod>__construct($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>SellerModel</className>
      <methodName>inst</methodName>
      <methodSignature>inst($params = [])</methodSignature>
      <fullMethod>inst($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>SellerModel</className>
      <methodName>getInst</methodName>
      <methodSignature>getInst($seller_id)</methodSignature>
      <fullMethod>getInst($seller_id)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>SellerModel</className>
      <methodName>isCanBuy</methodName>
      <methodSignature>isCanBuy()</methodSignature>
      <fullMethod>isCanBuy()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Model</package>
      <className>StatusCode</className>
      <methodName>returnFormat</methodName>
      <methodSignature>returnFormat($info = '', $status = self::SUCCESS_CODE)</methodSignature>
      <fullMethod>returnFormat($info = '', $status = self::SUCCESS_CODE)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderCountAreaMongo</className>
      <methodName>getCount</methodName>
      <methodSignature>getCount($params)</methodSignature>
      <fullMethod>getCount($params)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderCountAreaMongo</className>
      <methodName>getAreaCount</methodName>
      <methodSignature>getAreaCount($param,$buildWhere)</methodSignature>
      <fullMethod>getAreaCount($param,$buildWhere)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderCountAreaMongo</className>
      <methodName>getAreaList</methodName>
      <methodSignature>getAreaList($param,$buildWhere)</methodSignature>
      <fullMethod>getAreaList($param,$buildWhere)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderCountAreaMongo</className>
      <methodName>_createSortParam</methodName>
      <methodSignature>_createSortParam($params)</methodSignature>
      <fullMethod>_createSortParam($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderCountAreaMongo</className>
      <methodName>_createLimitParam</methodName>
      <methodSignature>_createLimitParam($params)</methodSignature>
      <fullMethod>_createLimitParam($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderCountProdMongo</className>
      <methodName>getCount</methodName>
      <methodSignature>getCount($params)</methodSignature>
      <fullMethod>getCount($params)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderCountProdMongo</className>
      <methodName>getProdCount</methodName>
      <methodSignature>getProdCount($param,$buildWhere)</methodSignature>
      <fullMethod>getProdCount($param,$buildWhere)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderCountProdMongo</className>
      <methodName>getProdList</methodName>
      <methodSignature>getProdList($param,$buildWhere)</methodSignature>
      <fullMethod>getProdList($param,$buildWhere)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderCountProdMongo</className>
      <methodName>_createSortParam</methodName>
      <methodSignature>_createSortParam($params)</methodSignature>
      <fullMethod>_createSortParam($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderCountProdMongo</className>
      <methodName>_createLimitParam</methodName>
      <methodSignature>_createLimitParam($params)</methodSignature>
      <fullMethod>_createLimitParam($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderCountSellerMongo</className>
      <methodName>getCount</methodName>
      <methodSignature>getCount($params)</methodSignature>
      <fullMethod>getCount($params)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderCountSellerMongo</className>
      <methodName>getSellerCount</methodName>
      <methodSignature>getSellerCount($param,$buildWhere)</methodSignature>
      <fullMethod>getSellerCount($param,$buildWhere)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderCountSellerMongo</className>
      <methodName>getSellerList</methodName>
      <methodSignature>getSellerList($param,$buildWhere)</methodSignature>
      <fullMethod>getSellerList($param,$buildWhere)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderCountSellerMongo</className>
      <methodName>_createSortParam</methodName>
      <methodSignature>_createSortParam($params)</methodSignature>
      <fullMethod>_createSortParam($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderCountSellerMongo</className>
      <methodName>_createLimitParam</methodName>
      <methodSignature>_createLimitParam($params)</methodSignature>
      <fullMethod>_createLimitParam($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderItemMongo</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderItemMongo</className>
      <methodName>getOrderItemInfo</methodName>
      <methodSignature>getOrderItemInfo($params)</methodSignature>
      <fullMethod>getOrderItemInfo($params)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderItemMongo</className>
      <methodName>addOrderItemData</methodName>
      <methodSignature>addOrderItemData($params)</methodSignature>
      <fullMethod>addOrderItemData($params)</fullMethod>
      <crap>240</crap>
      <complexity>15</complexity>
      <coverage>0</coverage>
      <crapLoad>16</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderItemMongo</className>
      <methodName>deleteData</methodName>
      <methodSignature>deleteData($params)</methodSignature>
      <fullMethod>deleteData($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderMongo</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderMongo</className>
      <methodName>getOrderListInfo</methodName>
      <methodSignature>getOrderListInfo($params = [])</methodSignature>
      <fullMethod>getOrderListInfo($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderPriceChangeMongo</className>
      <methodName>createChange</methodName>
      <methodSignature>createChange($params)</methodSignature>
      <fullMethod>createChange($params)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderPriceChangeMongo</className>
      <methodName>getChangeList</methodName>
      <methodSignature>getChangeList($params  = [])</methodSignature>
      <fullMethod>getChangeList($params  = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderPriceMongo</className>
      <methodName>addOrderFinance</methodName>
      <methodSignature>addOrderFinance($params)</methodSignature>
      <fullMethod>addOrderFinance($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderPriceMongo</className>
      <methodName>saveOrderFinance</methodName>
      <methodSignature>saveOrderFinance($params)</methodSignature>
      <fullMethod>saveOrderFinance($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderPriceMongo</className>
      <methodName>getOrderFinance</methodName>
      <methodSignature>getOrderFinance($params = [])</methodSignature>
      <fullMethod>getOrderFinance($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderPriceMongo</className>
      <methodName>getOrderPriceNextId</methodName>
      <methodSignature>getOrderPriceNextId()</methodSignature>
      <fullMethod>getOrderPriceNextId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderReductionMongo</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderReductionMongo</className>
      <methodName>createReduction</methodName>
      <methodSignature>createReduction($params)</methodSignature>
      <fullMethod>createReduction($params)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderReductionMongo</className>
      <methodName>getReductionInfo</methodName>
      <methodSignature>getReductionInfo($param, $buildWhere)</methodSignature>
      <fullMethod>getReductionInfo($param, $buildWhere)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderReductionMongo</className>
      <methodName>getReductionCount</methodName>
      <methodSignature>getReductionCount($param, $buildWhere)</methodSignature>
      <fullMethod>getReductionCount($param, $buildWhere)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderReductionMongo</className>
      <methodName>getReductionList</methodName>
      <methodSignature>getReductionList($param, $buildWhere)</methodSignature>
      <fullMethod>getReductionList($param, $buildWhere)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderReductionMongo</className>
      <methodName>editReductionStatust</methodName>
      <methodSignature>editReductionStatust($params)</methodSignature>
      <fullMethod>editReductionStatust($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderReductionMongo</className>
      <methodName>editReductionAudit</methodName>
      <methodSignature>editReductionAudit($params)</methodSignature>
      <fullMethod>editReductionAudit($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderReductionMongo</className>
      <methodName>_createSortParam</methodName>
      <methodSignature>_createSortParam($params)</methodSignature>
      <fullMethod>_createSortParam($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderReductionMongo</className>
      <methodName>_createLimitParam</methodName>
      <methodSignature>_createLimitParam($params)</methodSignature>
      <fullMethod>_createLimitParam($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderReductionMongo</className>
      <methodName>getTradeRefund</methodName>
      <methodSignature>getTradeRefund($params)</methodSignature>
      <fullMethod>getTradeRefund($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderReductionMongo</className>
      <methodName>setOrderRefundCallback</methodName>
      <methodSignature>setOrderRefundCallback($params)</methodSignature>
      <fullMethod>setOrderRefundCallback($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderReductionMongo</className>
      <methodName>getTradeSuccess</methodName>
      <methodSignature>getTradeSuccess($params)</methodSignature>
      <fullMethod>getTradeSuccess($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderReductionMongo</className>
      <methodName>auditingRefundAuto</methodName>
      <methodSignature>auditingRefundAuto($params)</methodSignature>
      <fullMethod>auditingRefundAuto($params)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderReductionMongo</className>
      <methodName>auditingRefundAudit</methodName>
      <methodSignature>auditingRefundAudit($orderRefundId)</methodSignature>
      <fullMethod>auditingRefundAudit($orderRefundId)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>createRefund</methodName>
      <methodSignature>createRefund($params)</methodSignature>
      <fullMethod>createRefund($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>getRefundInfo</methodName>
      <methodSignature>getRefundInfo($param, $buildWhere)</methodSignature>
      <fullMethod>getRefundInfo($param, $buildWhere)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>getRefundCount</methodName>
      <methodSignature>getRefundCount($param, $buildWhere)</methodSignature>
      <fullMethod>getRefundCount($param, $buildWhere)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>getRefundList</methodName>
      <methodSignature>getRefundList($param, $buildWhere)</methodSignature>
      <fullMethod>getRefundList($param, $buildWhere)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>editRefundCallback</methodName>
      <methodSignature>editRefundCallback($params, $status)</methodSignature>
      <fullMethod>editRefundCallback($params, $status)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>editRefundByPay</methodName>
      <methodSignature>editRefundByPay($params)</methodSignature>
      <fullMethod>editRefundByPay($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>editRefundForPay</methodName>
      <methodSignature>editRefundForPay($params)</methodSignature>
      <fullMethod>editRefundForPay($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>editRefundAuto</methodName>
      <methodSignature>editRefundAuto($params)</methodSignature>
      <fullMethod>editRefundAuto($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>editRefundAudit</methodName>
      <methodSignature>editRefundAudit($params)</methodSignature>
      <fullMethod>editRefundAudit($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>editRefundCallbackForPay</methodName>
      <methodSignature>editRefundCallbackForPay($params)</methodSignature>
      <fullMethod>editRefundCallbackForPay($params)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>_createSortParam</methodName>
      <methodSignature>_createSortParam($params)</methodSignature>
      <fullMethod>_createSortParam($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>_createLimitParam</methodName>
      <methodSignature>_createLimitParam($params)</methodSignature>
      <fullMethod>_createLimitParam($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>getTradeRefund</methodName>
      <methodSignature>getTradeRefund($params)</methodSignature>
      <fullMethod>getTradeRefund($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>setOrderRefundCallback</methodName>
      <methodSignature>setOrderRefundCallback($params)</methodSignature>
      <fullMethod>setOrderRefundCallback($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>getTradeSuccess</methodName>
      <methodSignature>getTradeSuccess($params)</methodSignature>
      <fullMethod>getTradeSuccess($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>auditingRefundAuto</methodName>
      <methodSignature>auditingRefundAuto($params)</methodSignature>
      <fullMethod>auditingRefundAuto($params)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>OrderRefundMongo</className>
      <methodName>auditingRefundAudit</methodName>
      <methodSignature>auditingRefundAudit($orderRefundId)</methodSignature>
      <fullMethod>auditingRefundAudit($orderRefundId)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>ReductionLogMongo</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>ShippingCartMongo</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>ShippingCartMongo</className>
      <methodName>addData</methodName>
      <methodSignature>addData($params = [])</methodSignature>
      <fullMethod>addData($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>ShippingCartMongo</className>
      <methodName>delData</methodName>
      <methodSignature>delData($params = [])</methodSignature>
      <fullMethod>delData($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>ShippingCartMongo</className>
      <methodName>saveData</methodName>
      <methodSignature>saveData($params = [])</methodSignature>
      <fullMethod>saveData($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>ShippingCartMongo</className>
      <methodName>getData</methodName>
      <methodSignature>getData($params = [], $getMaster = 0)</methodSignature>
      <fullMethod>getData($params = [], $getMaster = 0)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>TradeMongo</className>
      <methodName>createTrade</methodName>
      <methodSignature>createTrade($params)</methodSignature>
      <fullMethod>createTrade($params)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>TradeMongo</className>
      <methodName>getTradeCount</methodName>
      <methodSignature>getTradeCount($param, $buildWhere)</methodSignature>
      <fullMethod>getTradeCount($param, $buildWhere)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>TradeMongo</className>
      <methodName>getTradeList</methodName>
      <methodSignature>getTradeList($param, $buildWhere)</methodSignature>
      <fullMethod>getTradeList($param, $buildWhere)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>TradeMongo</className>
      <methodName>getTradelistByField</methodName>
      <methodSignature>getTradelistByField($param, $buildWhere, $Fied)</methodSignature>
      <fullMethod>getTradelistByField($param, $buildWhere, $Fied)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>TradeMongo</className>
      <methodName>getTradeListByR</methodName>
      <methodSignature>getTradeListByR($params)</methodSignature>
      <fullMethod>getTradeListByR($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>TradeMongo</className>
      <methodName>_createSortParam</methodName>
      <methodSignature>_createSortParam($params)</methodSignature>
      <fullMethod>_createSortParam($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>TradeMongo</className>
      <methodName>_createLimitParam</methodName>
      <methodSignature>_createLimitParam($params)</methodSignature>
      <fullMethod>_createLimitParam($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>TradeMongo</className>
      <methodName>_createTradeSign</methodName>
      <methodSignature>_createTradeSign($createTime, $userId, $serviceId, $paymentMethodId)</methodSignature>
      <fullMethod>_createTradeSign($createTime, $userId, $serviceId, $paymentMethodId)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>TradeMongo</className>
      <methodName>editTradeStatus</methodName>
      <methodSignature>editTradeStatus($params, $status)</methodSignature>
      <fullMethod>editTradeStatus($params, $status)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>TradeMongo</className>
      <methodName>editRefundTradeStatus</methodName>
      <methodSignature>editRefundTradeStatus($params, $status)</methodSignature>
      <fullMethod>editRefundTradeStatus($params, $status)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>TradeMongo</className>
      <methodName>cancelTrade</methodName>
      <methodSignature>cancelTrade($params)</methodSignature>
      <fullMethod>cancelTrade($params)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>TradeMongo</className>
      <methodName>changeTradeStatus</methodName>
      <methodSignature>changeTradeStatus($params)</methodSignature>
      <fullMethod>changeTradeStatus($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>TradeMongo</className>
      <methodName>changeTransactionId</methodName>
      <methodSignature>changeTransactionId($transactionId, $tradeSign, $trade_id = [])</methodSignature>
      <fullMethod>changeTransactionId($transactionId, $tradeSign, $trade_id = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>TradeMongo</className>
      <methodName>changeTransactionIdForRefund</methodName>
      <methodSignature>changeTransactionIdForRefund($transactionId, $tradeSign)</methodSignature>
      <fullMethod>changeTransactionIdForRefund($transactionId, $tradeSign)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>UnpaymentRecordMongo</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>UnpaymentRecordMongo</className>
      <methodName>addData</methodName>
      <methodSignature>addData($params = [])</methodSignature>
      <fullMethod>addData($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>UnpaymentRecordMongo</className>
      <methodName>saveData</methodName>
      <methodSignature>saveData($params = [])</methodSignature>
      <fullMethod>saveData($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mongo</package>
      <className>UnpaymentRecordMongo</className>
      <methodName>getData</methodName>
      <methodSignature>getData($params = [], $getMaster = 0)</methodSignature>
      <fullMethod>getData($params = [], $getMaster = 0)</fullMethod>
      <crap>25.71</crap>
      <complexity>9</complexity>
      <coverage>40.91</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mysql</package>
      <className>TblOrderBSMysql</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mysql</package>
      <className>TblOrderBSMysql</className>
      <methodName>paramsSwitch</methodName>
      <methodSignature>paramsSwitch($params, $unmatch_set = 1)</methodSignature>
      <fullMethod>paramsSwitch($params, $unmatch_set = 1)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Mysql</package>
      <className>TblOrderBSMysql</className>
      <methodName>switchOrderStatus</methodName>
      <methodSignature>switchOrderStatus(&amp;$order_info)</methodSignature>
      <fullMethod>switchOrderStatus(&amp;$order_info)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mysql</package>
      <className>TblOrderItemBSMysql</className>
      <methodName>getFormatOrderItems</methodName>
      <methodSignature>getFormatOrderItems($order_id, $order_items)</methodSignature>
      <fullMethod>getFormatOrderItems($order_id, $order_items)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mysql</package>
      <className>TblOrderItemBSMysql</className>
      <methodName>formatOrderItems</methodName>
      <methodSignature>formatOrderItems()</methodSignature>
      <fullMethod>formatOrderItems()</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Mysql</package>
      <className>TblOrderItemBSMysql</className>
      <methodName>paramsSwitch</methodName>
      <methodSignature>paramsSwitch($params)</methodSignature>
      <fullMethod>paramsSwitch($params)</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>BasicService</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>BasicService</className>
      <methodName>validateRestaurantMinPrice</methodName>
      <methodSignature>validateRestaurantMinPrice($params = [])</methodSignature>
      <fullMethod>validateRestaurantMinPrice($params = [])</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>BasicService</className>
      <methodName>validateFoodStockReturnInfo</methodName>
      <methodSignature>validateFoodStockReturnInfo($params = [])</methodSignature>
      <fullMethod>validateFoodStockReturnInfo($params = [])</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>BasicService</className>
      <methodName>validateShopIsExpress</methodName>
      <methodSignature>validateShopIsExpress($params)</methodSignature>
      <fullMethod>validateShopIsExpress($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>BasicService</className>
      <methodName>validateDoShopIsExpress</methodName>
      <methodSignature>validateDoShopIsExpress($params = [])</methodSignature>
      <fullMethod>validateDoShopIsExpress($params = [])</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>BasicService</className>
      <methodName>getCityInfoFromBasic</methodName>
      <methodSignature>getCityInfoFromBasic($params = [])</methodSignature>
      <fullMethod>getCityInfoFromBasic($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>BasicService</className>
      <methodName>getAreaInfoFromBasic</methodName>
      <methodSignature>getAreaInfoFromBasic($params = [])</methodSignature>
      <fullMethod>getAreaInfoFromBasic($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>BasicService</className>
      <methodName>getRestaurantInfoFromBasic</methodName>
      <methodSignature>getRestaurantInfoFromBasic($params = [])</methodSignature>
      <fullMethod>getRestaurantInfoFromBasic($params = [])</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>BasicService</className>
      <methodName>getFoodInfoFromBasic</methodName>
      <methodSignature>getFoodInfoFromBasic($params = [])</methodSignature>
      <fullMethod>getFoodInfoFromBasic($params = [])</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>BasicService</className>
      <methodName>redueFoodStockFromBasic</methodName>
      <methodSignature>redueFoodStockFromBasic($params = [])</methodSignature>
      <fullMethod>redueFoodStockFromBasic($params = [])</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>BasicService</className>
      <methodName>freeFoodStockFromBasic</methodName>
      <methodSignature>freeFoodStockFromBasic($params = [])</methodSignature>
      <fullMethod>freeFoodStockFromBasic($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>BasicService</className>
      <methodName>getSelfSellerInfo</methodName>
      <methodSignature>getSelfSellerInfo($params = [], $return_detail = 0)</methodSignature>
      <fullMethod>getSelfSellerInfo($params = [], $return_detail = 0)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>BasicService</className>
      <methodName>getBasicConfig</methodName>
      <methodSignature>getBasicConfig($params = [])</methodSignature>
      <fullMethod>getBasicConfig($params = [])</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>BasicService</className>
      <methodName>orderPaymentTypeToAdminPaymentMode</methodName>
      <methodSignature>orderPaymentTypeToAdminPaymentMode($params = '')</methodSignature>
      <fullMethod>orderPaymentTypeToAdminPaymentMode($params = '')</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>getOrderRequestCache</methodName>
      <methodSignature>getOrderRequestCache()</methodSignature>
      <fullMethod>getOrderRequestCache()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setOrderRequestCache</methodName>
      <methodSignature>setOrderRequestCache()</methodSignature>
      <fullMethod>setOrderRequestCache()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setReduceOrderRequestCache</methodName>
      <methodSignature>setReduceOrderRequestCache()</methodSignature>
      <fullMethod>setReduceOrderRequestCache()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setInsertOrderErrorOrderDetailCache</methodName>
      <methodSignature>setInsertOrderErrorOrderDetailCache($params = [])</methodSignature>
      <fullMethod>setInsertOrderErrorOrderDetailCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setInsertOrderItemErrorItemDetailCache</methodName>
      <methodSignature>setInsertOrderItemErrorItemDetailCache($params = [])</methodSignature>
      <fullMethod>setInsertOrderItemErrorItemDetailCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setInsertOrderNormalErrorItemDetailCache</methodName>
      <methodSignature>setInsertOrderNormalErrorItemDetailCache($params = [])</methodSignature>
      <fullMethod>setInsertOrderNormalErrorItemDetailCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setInsertOrderGroupErrorItemDetailCache</methodName>
      <methodSignature>setInsertOrderGroupErrorItemDetailCache($params = [])</methodSignature>
      <fullMethod>setInsertOrderGroupErrorItemDetailCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setInsertOrderPriceErrorPriceDetailCache</methodName>
      <methodSignature>setInsertOrderPriceErrorPriceDetailCache($params = [])</methodSignature>
      <fullMethod>setInsertOrderPriceErrorPriceDetailCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setInsertBuyerAddressErrorPriceDetailCache</methodName>
      <methodSignature>setInsertBuyerAddressErrorPriceDetailCache($params = [])</methodSignature>
      <fullMethod>setInsertBuyerAddressErrorPriceDetailCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setInsertBuyerInvoiceErrorAddressDetailCache</methodName>
      <methodSignature>setInsertBuyerInvoiceErrorAddressDetailCache($params = [])</methodSignature>
      <fullMethod>setInsertBuyerInvoiceErrorAddressDetailCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setInsertOrderAttributeErrorAttributeDetailCache</methodName>
      <methodSignature>setInsertOrderAttributeErrorAttributeDetailCache($params = [])</methodSignature>
      <fullMethod>setInsertOrderAttributeErrorAttributeDetailCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setBalanceRefundErrorCache</methodName>
      <methodSignature>setBalanceRefundErrorCache($params = [])</methodSignature>
      <fullMethod>setBalanceRefundErrorCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>getOrderRequestUpdateCache</methodName>
      <methodSignature>getOrderRequestUpdateCache($params = [])</methodSignature>
      <fullMethod>getOrderRequestUpdateCache($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setOrderRequestUpdateCache</methodName>
      <methodSignature>setOrderRequestUpdateCache($params = [])</methodSignature>
      <fullMethod>setOrderRequestUpdateCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>delOrderRequestUpdateCache</methodName>
      <methodSignature>delOrderRequestUpdateCache($params = [])</methodSignature>
      <fullMethod>delOrderRequestUpdateCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>getConfigCache</methodName>
      <methodSignature>getConfigCache()</methodSignature>
      <fullMethod>getConfigCache()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setConfigCache</methodName>
      <methodSignature>setConfigCache($params = [])</methodSignature>
      <fullMethod>setConfigCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>getServiceManInfoCache</methodName>
      <methodSignature>getServiceManInfoCache($params = [])</methodSignature>
      <fullMethod>getServiceManInfoCache($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setServiceManInfoCache</methodName>
      <methodSignature>setServiceManInfoCache($params = [])</methodSignature>
      <fullMethod>setServiceManInfoCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>getDeliverManInfoCache</methodName>
      <methodSignature>getDeliverManInfoCache($params = [])</methodSignature>
      <fullMethod>getDeliverManInfoCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setDeliverManInfoCache</methodName>
      <methodSignature>setDeliverManInfoCache($params = [])</methodSignature>
      <fullMethod>setDeliverManInfoCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>getRestaurantInfoCache</methodName>
      <methodSignature>getRestaurantInfoCache($params = [])</methodSignature>
      <fullMethod>getRestaurantInfoCache($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setRestaurantInfoCache</methodName>
      <methodSignature>setRestaurantInfoCache($params = [])</methodSignature>
      <fullMethod>setRestaurantInfoCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>getRefundBalanceInfoCache</methodName>
      <methodSignature>getRefundBalanceInfoCache($params = [])</methodSignature>
      <fullMethod>getRefundBalanceInfoCache($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setRefundBalanceInfoCache</methodName>
      <methodSignature>setRefundBalanceInfoCache($params = [])</methodSignature>
      <fullMethod>setRefundBalanceInfoCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setOrderNoCache</methodName>
      <methodSignature>setOrderNoCache($params = [])</methodSignature>
      <fullMethod>setOrderNoCache($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setOrderSellerNo</methodName>
      <methodSignature>setOrderSellerNo($seller_id)</methodSignature>
      <fullMethod>setOrderSellerNo($seller_id)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>setCheckBlackCache</methodName>
      <methodSignature>setCheckBlackCache($params=[])</methodSignature>
      <fullMethod>setCheckBlackCache($params=[])</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>getCheckBlackCache</methodName>
      <methodSignature>getCheckBlackCache($params=[])</methodSignature>
      <fullMethod>getCheckBlackCache($params=[])</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>addUserPayPrice</methodName>
      <methodSignature>addUserPayPrice(array $params = [])</methodSignature>
      <fullMethod>addUserPayPrice(array $params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>getUserPayPriceList</methodName>
      <methodSignature>getUserPayPriceList(array $params = [])</methodSignature>
      <fullMethod>getUserPayPriceList(array $params = [])</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>delUserPayPriceKeys</methodName>
      <methodSignature>delUserPayPriceKeys()</methodSignature>
      <fullMethod>delUserPayPriceKeys()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>CacheService</className>
      <methodName>orderCacheKeyConfig</methodName>
      <methodSignature>orderCacheKeyConfig($key = null)</methodSignature>
      <fullMethod>orderCacheKeyConfig($key = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>FavorableService</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>FavorableService</className>
      <methodName>getCouponFavorableReturnInfo</methodName>
      <methodSignature>getCouponFavorableReturnInfo($params = [])</methodSignature>
      <fullMethod>getCouponFavorableReturnInfo($params = [])</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>FavorableService</className>
      <methodName>Budget</methodName>
      <methodSignature>Budget($charge, $code_info)</methodSignature>
      <fullMethod>Budget($charge, $code_info)</fullMethod>
      <crap>182</crap>
      <complexity>13</complexity>
      <coverage>0</coverage>
      <crapLoad>13</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>FavorableService</className>
      <methodName>getOrderFavorableCondition</methodName>
      <methodSignature>getOrderFavorableCondition($params = [])</methodSignature>
      <fullMethod>getOrderFavorableCondition($params = [])</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>FavorableService</className>
      <methodName>applyReceivableCondition</methodName>
      <methodSignature>applyReceivableCondition($params = [])</methodSignature>
      <fullMethod>applyReceivableCondition($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>FavorableService</className>
      <methodName>applyFavorableCardCondition</methodName>
      <methodSignature>applyFavorableCardCondition($params = [])</methodSignature>
      <fullMethod>applyFavorableCardCondition($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>FavorableService</className>
      <methodName>applyFavorableCodeCondition</methodName>
      <methodSignature>applyFavorableCodeCondition($params = [])</methodSignature>
      <fullMethod>applyFavorableCodeCondition($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>FavorableService</className>
      <methodName>favorableConfig</methodName>
      <methodSignature>favorableConfig($key = '')</methodSignature>
      <fullMethod>favorableConfig($key = '')</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>addOrderQueueCreateOrder</methodName>
      <methodSignature>addOrderQueueCreateOrder($params = [])</methodSignature>
      <fullMethod>addOrderQueueCreateOrder($params = [])</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>addOrderQueueAuditOrder</methodName>
      <methodSignature>addOrderQueueAuditOrder($params = [])</methodSignature>
      <fullMethod>addOrderQueueAuditOrder($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>addOrderQueueUrgentOrder</methodName>
      <methodSignature>addOrderQueueUrgentOrder($params = [])</methodSignature>
      <fullMethod>addOrderQueueUrgentOrder($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>addOrderQueueToAuditOrder</methodName>
      <methodSignature>addOrderQueueToAuditOrder($params = [])</methodSignature>
      <fullMethod>addOrderQueueToAuditOrder($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>addPaymentQueuePayment</methodName>
      <methodSignature>addPaymentQueuePayment($params = [])</methodSignature>
      <fullMethod>addPaymentQueuePayment($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>addPaymentQueueCancelOrder</methodName>
      <methodSignature>addPaymentQueueCancelOrder($params = [])</methodSignature>
      <fullMethod>addPaymentQueueCancelOrder($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>batchAddOrderQueuePayment</methodName>
      <methodSignature>batchAddOrderQueuePayment($params = [])</methodSignature>
      <fullMethod>batchAddOrderQueuePayment($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>addOrderQueuePayment</methodName>
      <methodSignature>addOrderQueuePayment($info = [])</methodSignature>
      <fullMethod>addOrderQueuePayment($info = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>addOrderQueuePaymentCallBack</methodName>
      <methodSignature>addOrderQueuePaymentCallBack($params = [])</methodSignature>
      <fullMethod>addOrderQueuePaymentCallBack($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>addOrderQueueCancelOrder</methodName>
      <methodSignature>addOrderQueueCancelOrder($params = [])</methodSignature>
      <fullMethod>addOrderQueueCancelOrder($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>addCancelOrderReturn</methodName>
      <methodSignature>addCancelOrderReturn($params = [])</methodSignature>
      <fullMethod>addCancelOrderReturn($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>addOrderQueueRefundUpdateOrder</methodName>
      <methodSignature>addOrderQueueRefundUpdateOrder($params = [])</methodSignature>
      <fullMethod>addOrderQueueRefundUpdateOrder($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>addOrderQueueUpdateOrder</methodName>
      <methodSignature>addOrderQueueUpdateOrder($params = [])</methodSignature>
      <fullMethod>addOrderQueueUpdateOrder($params = [])</fullMethod>
      <crap>702</crap>
      <complexity>26</complexity>
      <coverage>0</coverage>
      <crapLoad>27</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>addOrderQueueUpdateStatusOrder</methodName>
      <methodSignature>addOrderQueueUpdateStatusOrder($info = [])</methodSignature>
      <fullMethod>addOrderQueueUpdateStatusOrder($info = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>addOrderChangeQueue</methodName>
      <methodSignature>addOrderChangeQueue($type, $order_no, $data = [])</methodSignature>
      <fullMethod>addOrderChangeQueue($type, $order_no, $data = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>McService</className>
      <methodName>addOrderQueue</methodName>
      <methodSignature>addOrderQueue($mc_params, $serviceName, $order_id = 0)</methodSignature>
      <fullMethod>addOrderQueue($mc_params, $serviceName, $order_id = 0)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>PMSService</className>
      <methodName>callInterface</methodName>
      <methodSignature>callInterface($m, $c, $a, $params)</methodSignature>
      <fullMethod>callInterface($m, $c, $a, $params)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>PMSService</className>
      <methodName>callInterfaceYar</methodName>
      <methodSignature>callInterfaceYar($m, $c, $a, $params)</methodSignature>
      <fullMethod>callInterfaceYar($m, $c, $a, $params)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>PMSService</className>
      <methodName>getFavorableInfo</methodName>
      <methodSignature>getFavorableInfo(array $params = [])</methodSignature>
      <fullMethod>getFavorableInfo(array $params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>PMSService</className>
      <methodName>getFavorableCodeInfo</methodName>
      <methodSignature>getFavorableCodeInfo(array $params = [])</methodSignature>
      <fullMethod>getFavorableCodeInfo(array $params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>PMSService</className>
      <methodName>returnOrderData</methodName>
      <methodSignature>returnOrderData(array $params = [])</methodSignature>
      <fullMethod>returnOrderData(array $params = [])</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>PMSService</className>
      <methodName>orderApplyFavorableCode</methodName>
      <methodSignature>orderApplyFavorableCode(array $params = [])</methodSignature>
      <fullMethod>orderApplyFavorableCode(array $params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>PMSService</className>
      <methodName>getInfoByMobile</methodName>
      <methodSignature>getInfoByMobile($mobile)</methodSignature>
      <fullMethod>getInfoByMobile($mobile)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>PMSService</className>
      <methodName>getPublicConf</methodName>
      <methodSignature>getPublicConf($city_id = 0)</methodSignature>
      <fullMethod>getPublicConf($city_id = 0)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>PMSService</className>
      <methodName>checkCardOrCoupon</methodName>
      <methodSignature>checkCardOrCoupon(array $params = [])</methodSignature>
      <fullMethod>checkCardOrCoupon(array $params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>RuleService</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>RuleService</className>
      <methodName>validateSellerServiceTime</methodName>
      <methodSignature>validateSellerServiceTime($params = [])</methodSignature>
      <fullMethod>validateSellerServiceTime($params = [])</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>RuleService</className>
      <methodName>validateSellerSaleTime</methodName>
      <methodSignature>validateSellerSaleTime($params = [])</methodSignature>
      <fullMethod>validateSellerSaleTime($params = [])</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>RuleService</className>
      <methodName>validateServiceTime</methodName>
      <methodSignature>validateServiceTime($params = [])</methodSignature>
      <fullMethod>validateServiceTime($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>RuleService</className>
      <methodName>validateDeliveryTimeMore</methodName>
      <methodSignature>validateDeliveryTimeMore(&amp;$params = [])</methodSignature>
      <fullMethod>validateDeliveryTimeMore(&amp;$params = [])</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>RuleService</className>
      <methodName>getOrderIsPreOrder</methodName>
      <methodSignature>getOrderIsPreOrder(&amp;$params = [])</methodSignature>
      <fullMethod>getOrderIsPreOrder(&amp;$params = [])</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>RuleService</className>
      <methodName>validateDeliveryTime</methodName>
      <methodSignature>validateDeliveryTime($params = [])</methodSignature>
      <fullMethod>validateDeliveryTime($params = [])</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>RuleService</className>
      <methodName>validateFoodServiceTime</methodName>
      <methodSignature>validateFoodServiceTime($params = [])</methodSignature>
      <fullMethod>validateFoodServiceTime($params = [])</fullMethod>
      <crap>240</crap>
      <complexity>15</complexity>
      <coverage>0</coverage>
      <crapLoad>16</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>RuleService</className>
      <methodName>validateVipFood</methodName>
      <methodSignature>validateVipFood($params = [])</methodSignature>
      <fullMethod>validateVipFood($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>RuleService</className>
      <methodName>getRestaurantPreOrderTime</methodName>
      <methodSignature>getRestaurantPreOrderTime($params = [])</methodSignature>
      <fullMethod>getRestaurantPreOrderTime($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>RuleService</className>
      <methodName>getOrderMinDeliverTime</methodName>
      <methodSignature>getOrderMinDeliverTime($params = [])</methodSignature>
      <fullMethod>getOrderMinDeliverTime($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>RuleService</className>
      <methodName>getAfterDelayTime</methodName>
      <methodSignature>getAfterDelayTime($time, $delay)</methodSignature>
      <fullMethod>getAfterDelayTime($time, $delay)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>SMSService</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>SMSService</className>
      <methodName>sendSms</methodName>
      <methodSignature>sendSms($params)</methodSignature>
      <fullMethod>sendSms($params)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>ShippingService</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>ShippingService</className>
      <methodName>bindOrderServicePoint</methodName>
      <methodSignature>bindOrderServicePoint($params = [])</methodSignature>
      <fullMethod>bindOrderServicePoint($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>ShippingService</className>
      <methodName>getDelayInfo</methodName>
      <methodSignature>getDelayInfo($params = [])</methodSignature>
      <fullMethod>getDelayInfo($params = [])</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>ShippingService</className>
      <methodName>getDeliverTimeFromShipping</methodName>
      <methodSignature>getDeliverTimeFromShipping($params = [])</methodSignature>
      <fullMethod>getDeliverTimeFromShipping($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>ShippingService</className>
      <methodName>getTaskInfo</methodName>
      <methodSignature>getTaskInfo(array $params)</methodSignature>
      <fullMethod>getTaskInfo(array $params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>ShippingService</className>
      <methodName>getUserList</methodName>
      <methodSignature>getUserList(array $params)</methodSignature>
      <fullMethod>getUserList(array $params)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>ShippingService</className>
      <methodName>getDeliverManInfo</methodName>
      <methodSignature>getDeliverManInfo($params = [])</methodSignature>
      <fullMethod>getDeliverManInfo($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>ShippingService</className>
      <methodName>getOrderDefaultCostFromShipping</methodName>
      <methodSignature>getOrderDefaultCostFromShipping($params = [])</methodSignature>
      <fullMethod>getOrderDefaultCostFromShipping($params = [])</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>ShippingService</className>
      <methodName>getCostFromShipping</methodName>
      <methodSignature>getCostFromShipping($params = [])</methodSignature>
      <fullMethod>getCostFromShipping($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>ShippingService</className>
      <methodName>saveOrderPrevious</methodName>
      <methodSignature>saveOrderPrevious($params = [])</methodSignature>
      <fullMethod>saveOrderPrevious($params = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>ShippingService</className>
      <methodName>getShippingConfig</methodName>
      <methodSignature>getShippingConfig($params = [])</methodSignature>
      <fullMethod>getShippingConfig($params = [])</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>TradeService</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>TradeService</className>
      <methodName>clientOrderPayment</methodName>
      <methodSignature>clientOrderPayment($params)</methodSignature>
      <fullMethod>clientOrderPayment($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>TradeService</className>
      <methodName>clientOrderPayResult</methodName>
      <methodSignature>clientOrderPayResult($params = [])</methodSignature>
      <fullMethod>clientOrderPayResult($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>TradeService</className>
      <methodName>clientSetRefund</methodName>
      <methodSignature>clientSetRefund($params = [])</methodSignature>
      <fullMethod>clientSetRefund($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>TradeService</className>
      <methodName>clientGetRefundPrice</methodName>
      <methodSignature>clientGetRefundPrice($params = [])</methodSignature>
      <fullMethod>clientGetRefundPrice($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>TradeService</className>
      <methodName>clientGetRefundPriceNoAudit</methodName>
      <methodSignature>clientGetRefundPriceNoAudit($params = [])</methodSignature>
      <fullMethod>clientGetRefundPriceNoAudit($params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>UcenterService</className>
      <methodName>callInterface</methodName>
      <methodSignature>callInterface($path, $params)</methodSignature>
      <fullMethod>callInterface($path, $params)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>UcenterService</className>
      <methodName>getUserInfo</methodName>
      <methodSignature>getUserInfo($params)</methodSignature>
      <fullMethod>getUserInfo($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>UcenterService</className>
      <methodName>getUserPackInfo</methodName>
      <methodSignature>getUserPackInfo($params)</methodSignature>
      <fullMethod>getUserPackInfo($params)</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>WSService</className>
      <methodName>callInterface</methodName>
      <methodSignature>callInterface($m, $c, $a, $params)</methodSignature>
      <fullMethod>callInterface($m, $c, $a, $params)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>WSService</className>
      <methodName>doRefunding</methodName>
      <methodSignature>doRefunding(array $params = [])</methodSignature>
      <fullMethod>doRefunding(array $params = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Order\Service</package>
      <className>WSService</className>
      <methodName>checkOrderBlackRule</methodName>
      <methodSignature>checkOrderBlackRule(array $params = [])</methodSignature>
      <fullMethod>checkOrderBlackRule(array $params = [])</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Serv\Controller</package>
      <className>PackController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Serv\Controller</package>
      <className>TcpservController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Serv\Controller</package>
      <className>YarservController</className>
      <methodName>_initialize</methodName>
      <methodSignature>_initialize()</methodSignature>
      <fullMethod>_initialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
  </methods>
</crap_result>
